---
source: tests/crate.rs
expression: info
---
pub trait Reflect {
    const TYPE_INFO: erised::types::Item;
}
pub mod erised {
    use super::*;
    impl Reflect for ::erised::heap_types::StaticItemKind {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticItemKind",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticItemKind"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (212usize, 23usize),
                    end: (212usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Module",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "Module"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (214usize, 4usize),
                            end: (214usize, 10usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "ExternCrate",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "ExternCrate"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (215usize, 4usize),
                            end: (215usize, 15usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Import",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "Import"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (216usize, 4usize),
                            end: (216usize, 10usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Struct",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "Struct"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (217usize, 4usize),
                            end: (217usize, 10usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "StructField",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "StructField"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (218usize, 4usize),
                            end: (218usize, 15usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Union",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "Union"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (219usize, 4usize),
                            end: (219usize, 9usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Enum",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "Enum"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (220usize, 4usize),
                            end: (220usize, 8usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Variant",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "Variant"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (221usize, 4usize),
                            end: (221usize, 11usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Function",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "Function"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (222usize, 4usize),
                            end: (222usize, 12usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Typedef",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "Typedef"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (223usize, 4usize),
                            end: (223usize, 11usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "OpaqueTy",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "OpaqueTy"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (224usize, 4usize),
                            end: (224usize, 12usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Constant",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "Constant"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (225usize, 4usize),
                            end: (225usize, 12usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Trait",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "Trait"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (226usize, 4usize),
                            end: (226usize, 9usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "TraitAlias",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "TraitAlias"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (227usize, 4usize),
                            end: (227usize, 14usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Impl",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "Impl"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (228usize, 4usize),
                            end: (228usize, 8usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Static",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "Static"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (229usize, 4usize),
                            end: (229usize, 10usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "ForeignType",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "ForeignType"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (230usize, 4usize),
                            end: (230usize, 15usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Macro",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "Macro"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (231usize, 4usize),
                            end: (231usize, 9usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "ProcAttribute",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "ProcAttribute"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (232usize, 4usize),
                            end: (232usize, 17usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "ProcDerive",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "ProcDerive"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (233usize, 4usize),
                            end: (233usize, 14usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "AssocConst",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "AssocConst"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (234usize, 4usize),
                            end: (234usize, 14usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "AssocType",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "AssocType"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (235usize, 4usize),
                            end: (235usize, 13usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Primitive",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "Primitive"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (236usize, 4usize),
                            end: (236usize, 13usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Keyword",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItemKind", "Keyword"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (237usize, 4usize),
                            end: (237usize, 11usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Item {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "Item",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Item"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (241usize, 0usize),
                    end: (290usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Module",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "Module"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (242usize, 4usize),
                            end: (242usize, 18usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (242usize, 11usize),
                                end: (242usize, 17usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Module",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Module as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "ExternCrate",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "ExternCrate"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (243usize, 4usize),
                            end: (247usize, 5usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("meta"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (244usize, 8usize),
                                        end: (244usize, 22usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "ItemMeta",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::ItemMeta as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("name"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (245usize, 8usize),
                                        end: (245usize, 20usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "String",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "alloc",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["alloc", "string", "String"],
                                            kind: erised::types::ItemKind::Struct,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("rename"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (246usize, 8usize),
                                        end: (246usize, 30usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Option",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "core",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["core", "option", "Option"],
                                            kind: erised::types::ItemKind::Enum,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "String",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Summary(
                                                        || erised::types::ItemSummary {
                                                            krate: || {
                                                                erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") }
                                                            },
                                                            path: &["alloc", "string", "String"],
                                                            kind: erised::types::ItemKind::Struct,
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            ),
                                        )],
                                        bindings: &[],
                                    }),
                                }),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Import",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "Import"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (248usize, 4usize),
                            end: (248usize, 18usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (248usize, 11usize),
                                end: (248usize, 17usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Import",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Import as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Union",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "Union"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (250usize, 4usize),
                            end: (250usize, 16usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (250usize, 10usize),
                                end: (250usize, 15usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Union",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Union as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Struct",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "Struct"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (251usize, 4usize),
                            end: (251usize, 18usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (251usize, 11usize),
                                end: (251usize, 17usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Struct",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Struct as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Enum",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "Enum"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (253usize, 4usize),
                            end: (253usize, 14usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (253usize, 9usize),
                                end: (253usize, 13usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Enum",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Enum as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Function",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "Function"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (255usize, 4usize),
                            end: (255usize, 22usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (255usize, 13usize),
                                end: (255usize, 21usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Function",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Function as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Trait",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "Trait"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (257usize, 4usize),
                            end: (257usize, 16usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (257usize, 10usize),
                                end: (257usize, 15usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Trait",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Trait as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "TraitAlias",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "TraitAlias"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (258usize, 4usize),
                            end: (258usize, 26usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (258usize, 15usize),
                                end: (258usize, 25usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "TraitAlias",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::TraitAlias as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Impl",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "Impl"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (259usize, 4usize),
                            end: (259usize, 14usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (259usize, 9usize),
                                end: (259usize, 13usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Impl",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Impl as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Typedef",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "Typedef"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (261usize, 4usize),
                            end: (261usize, 20usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (261usize, 12usize),
                                end: (261usize, 19usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Typedef",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Typedef as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "OpaqueTy",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "OpaqueTy"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (262usize, 4usize),
                            end: (262usize, 22usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (262usize, 13usize),
                                end: (262usize, 21usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "OpaqueTy",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::OpaqueTy as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Constant",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "Constant"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (263usize, 4usize),
                            end: (263usize, 26usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (263usize, 13usize),
                                end: (263usize, 25usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "ConstantItem",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::ConstantItem as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Static",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "Static"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (265usize, 4usize),
                            end: (265usize, 18usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (265usize, 11usize),
                                end: (265usize, 17usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Static",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Static as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "ForeignType",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "ForeignType"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (269usize, 4usize),
                            end: (269usize, 15usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: Some("`type`s from an extern block"),
                        attrs: &["#[default]"],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Macro",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "Macro"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (272usize, 4usize),
                            end: (272usize, 17usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: Some("Declarative macro_rules! macro"),
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (272usize, 10usize),
                                end: (272usize, 16usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "ProcMacro",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "ProcMacro"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (273usize, 4usize),
                            end: (273usize, 24usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (273usize, 14usize),
                                end: (273usize, 23usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "ProcMacro",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::ProcMacro as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Primitive",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "Primitive"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (275usize, 4usize),
                            end: (275usize, 24usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (275usize, 14usize),
                                end: (275usize, 23usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Primitive",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Primitive as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "AssocConst",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "AssocConst"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (277usize, 4usize),
                            end: (282usize, 5usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("meta"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (278usize, 8usize),
                                        end: (278usize, 22usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "ItemMeta",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::ItemMeta as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("type_"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (279usize, 8usize),
                                        end: (279usize, 19usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Type",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::Type as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("default"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (281usize, 8usize),
                                        end: (281usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: Some("e.g. `const X: usize = 5;`"),
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Option",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "core",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["core", "option", "Option"],
                                            kind: erised::types::ItemKind::Enum,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "String",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Summary(
                                                        || erised::types::ItemSummary {
                                                            krate: || {
                                                                erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") }
                                                            },
                                                            path: &["alloc", "string", "String"],
                                                            kind: erised::types::ItemKind::Struct,
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            ),
                                        )],
                                        bindings: &[],
                                    }),
                                }),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "AssocType",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Item", "AssocType"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (283usize, 4usize),
                            end: (289usize, 5usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("meta"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (284usize, 8usize),
                                        end: (284usize, 22usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "ItemMeta",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::ItemMeta as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("generics"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (285usize, 8usize),
                                        end: (285usize, 26usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Generics",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::Generics as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("bounds"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (286usize, 8usize),
                                        end: (286usize, 33usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Vec",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "alloc",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["alloc", "vec", "Vec"],
                                            kind: erised::types::ItemKind::Struct,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "GenericBound",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: GenericBound as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            ),
                                        )],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("default"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (288usize, 8usize),
                                        end: (288usize, 29usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: Some("e.g. `type X = usize;`"),
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Option",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "core",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["core", "option", "Option"],
                                            kind: erised::types::ItemKind::Enum,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "Type",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: Type as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            ),
                                        )],
                                        bindings: &[],
                                    }),
                                }),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::builder::Builder {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "Builder",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "builder", "Builder"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/builder.rs",
                    begin: (34usize, 0usize),
                    end: (39usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[],
                fields_stripped: true,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticItem {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticItem",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticItem"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (240usize, 23usize),
                    end: (240usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Module",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "Module"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (242usize, 11usize),
                                end: (242usize, 17usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticModule",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticModule as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "ExternCrate",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "ExternCrate"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("meta"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (244usize, 8usize),
                                        end: (244usize, 22usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "StaticItemMeta",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::StaticItemMeta as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("name"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (240usize, 23usize),
                                        end: (240usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Primitive("str"),
                                },
                            },
                            erised::types::StructField {
                                name: Some("rename"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (240usize, 23usize),
                                        end: (240usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Option",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "core",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["core", "option", "Option"],
                                            kind: erised::types::ItemKind::Enum,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::BorrowedRef {
                                                lifetime: Some("'static"),
                                                mutable: false,
                                                type_: erised::types::Type::Primitive("str"),
                                            },
                                        )],
                                        bindings: &[],
                                    }),
                                }),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Import",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "Import"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (248usize, 11usize),
                                end: (248usize, 17usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticImport",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticImport as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Union",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "Union"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (250usize, 10usize),
                                end: (250usize, 15usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticUnion",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticUnion as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Struct",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "Struct"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (251usize, 11usize),
                                end: (251usize, 17usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticStruct",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticStruct as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Enum",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "Enum"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (253usize, 9usize),
                                end: (253usize, 13usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticEnum",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticEnum as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Function",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "Function"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (255usize, 13usize),
                                end: (255usize, 21usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticFunction",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticFunction as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Trait",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "Trait"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (257usize, 10usize),
                                end: (257usize, 15usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticTrait",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticTrait as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "TraitAlias",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "TraitAlias"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (258usize, 15usize),
                                end: (258usize, 25usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticTraitAlias",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticTraitAlias as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Impl",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "Impl"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (259usize, 9usize),
                                end: (259usize, 13usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticImpl",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticImpl as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Typedef",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "Typedef"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (261usize, 12usize),
                                end: (261usize, 19usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticTypedef",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticTypedef as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "OpaqueTy",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "OpaqueTy"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (262usize, 13usize),
                                end: (262usize, 21usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticOpaqueTy",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticOpaqueTy as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Constant",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "Constant"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (263usize, 13usize),
                                end: (263usize, 25usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticConstantItem",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticConstantItem as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Static",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "Static"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (265usize, 11usize),
                                end: (265usize, 17usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticStatic",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticStatic as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "ForeignType",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "ForeignType"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (269usize, 4usize),
                            end: (269usize, 15usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Macro",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "Macro"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (240usize, 23usize),
                                end: (240usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "ProcMacro",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "ProcMacro"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (273usize, 14usize),
                                end: (273usize, 23usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticProcMacro",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticProcMacro as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Primitive",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "Primitive"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (275usize, 14usize),
                                end: (275usize, 23usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticPrimitive",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticPrimitive as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "AssocConst",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "AssocConst"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("meta"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (278usize, 8usize),
                                        end: (278usize, 22usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "StaticItemMeta",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::StaticItemMeta as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("type_"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (279usize, 8usize),
                                        end: (279usize, 19usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "StaticType",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("default"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (240usize, 23usize),
                                        end: (240usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Option",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "core",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["core", "option", "Option"],
                                            kind: erised::types::ItemKind::Enum,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::BorrowedRef {
                                                lifetime: Some("'static"),
                                                mutable: false,
                                                type_: erised::types::Type::Primitive("str"),
                                            },
                                        )],
                                        bindings: &[],
                                    }),
                                }),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "AssocType",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticItem", "AssocType"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (240usize, 23usize),
                            end: (240usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("meta"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (284usize, 8usize),
                                        end: (284usize, 22usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "StaticItemMeta",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::StaticItemMeta as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("generics"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (285usize, 8usize),
                                        end: (285usize, 26usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "StaticGenerics",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::StaticGenerics as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("bounds"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (240usize, 23usize),
                                        end: (240usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Slice(
                                        erised::types::Type::ResolvedPath(erised::types::Path {
                                            name: "StaticGenericBound",
                                            prefix: "",
                                            target: erised::types::Identifiable::Item(|| {
                                                < :: erised :: heap_types :: StaticGenericBound as Reflect > :: TYPE_INFO
                                            }),
                                            args: Some(|| {
                                                erised::types::GenericArgs::AngleBracketed {
                                                    args: &[],
                                                    bindings: &[],
                                                }
                                            }),
                                        }),
                                    ),
                                },
                            },
                            erised::types::StructField {
                                name: Some("default"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (240usize, 23usize),
                                        end: (240usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Option",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "core",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["core", "option", "Option"],
                                            kind: erised::types::ItemKind::Enum,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "StaticType",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: StaticType as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            ),
                                        )],
                                        bindings: &[],
                                    }),
                                }),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Module {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Struct (erised :: types :: Struct { name : "Module" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Module"] , kind : erised :: types :: ItemKind :: Struct }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (293usize , 0usize) , end : (301usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: StructKind :: Plain { fields : & [erised :: types :: StructField { name : Some ("name") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (294usize , 4usize) , end : (294usize , 20usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("meta") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (295usize , 4usize) , end : (295usize , 22usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "ItemMeta" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: ItemMeta as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("is_crate") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (296usize , 4usize) , end : (296usize , 22usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: Primitive ("bool") } , erised :: types :: StructField { name : Some ("items") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (297usize , 4usize) , end : (297usize , 32usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Identifiable" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Identifiable as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("is_stripped") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (300usize , 4usize) , end : (300usize , 25usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("If `true`, this module is not part of the public API, but it contains\nitems that are re-exported as public API.") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: Primitive ("bool") }] , fields_stripped : false } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticModule {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticModule",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticModule"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (292usize, 23usize),
                    end: (292usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (292usize, 23usize),
                                end: (292usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (295usize, 4usize),
                                end: (295usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("is_crate"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (296usize, 4usize),
                                end: (296usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("items"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (292usize, 23usize),
                                end: (292usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticIdentifiable",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticIdentifiable as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                    erised::types::StructField {
                        name: Some("is_stripped"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (300usize, 4usize),
                                end: (300usize, 25usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Union {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "Union",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Union"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (304usize, 0usize),
                    end: (309usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (305usize, 4usize),
                                end: (305usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Generics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Generics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("fields_stripped"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (306usize, 4usize),
                                end: (306usize, 29usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("fields"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (307usize, 4usize),
                                end: (307usize, 33usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "Identifiable",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: Identifiable as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("impls"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (308usize, 4usize),
                                end: (308usize, 32usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "Identifiable",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: Identifiable as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticUnion {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticUnion",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticUnion"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (303usize, 23usize),
                    end: (303usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (305usize, 4usize),
                                end: (305usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticGenerics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticGenerics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("fields_stripped"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (306usize, 4usize),
                                end: (306usize, 29usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("fields"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (303usize, 23usize),
                                end: (303usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticIdentifiable",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticIdentifiable as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                    erised::types::StructField {
                        name: Some("impls"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (303usize, 23usize),
                                end: (303usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticIdentifiable",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticIdentifiable as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Struct {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "Struct",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Struct"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (312usize, 0usize),
                    end: (318usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (313usize, 4usize),
                                end: (313usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (314usize, 4usize),
                                end: (314usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "ItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::ItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("kind"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (315usize, 4usize),
                                end: (315usize, 24usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StructKind",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StructKind as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (316usize, 4usize),
                                end: (316usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Generics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Generics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("impls"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (317usize, 4usize),
                                end: (317usize, 32usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "Identifiable",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: Identifiable as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticStruct {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticStruct",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticStruct"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (311usize, 23usize),
                    end: (311usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (311usize, 23usize),
                                end: (311usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (314usize, 4usize),
                                end: (314usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("kind"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (315usize, 4usize),
                                end: (315usize, 24usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticStructKind",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticStructKind as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (316usize, 4usize),
                                end: (316usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticGenerics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticGenerics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("impls"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (311usize, 23usize),
                                end: (311usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticIdentifiable",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticIdentifiable as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StructKind {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Enum (erised :: types :: Enum { name : "StructKind" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "StructKind"] , kind : erised :: types :: ItemKind :: Enum }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (321usize , 0usize) , end : (347usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , variants_stripped : false , variants : & [erised :: types :: Variant { name : "Unit" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "StructKind" , "Unit"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (327usize , 4usize) , end : (327usize , 8usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("A struct with no fields and no parentheses.\n\n```rust\npub struct Unit;\n```") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Plain , discriminant : None } , erised :: types :: Variant { name : "Tuple" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "StructKind" , "Tuple"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (336usize , 4usize) , end : (336usize , 35usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("A struct with unnamed fields.\n\n```rust\npub struct TupleStruct(i32);\npub struct EmptyTupleStruct();\n```\n\nPrivate and `#[doc(hidden)]` fields may give `None`") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (336usize , 10usize) , end : (336usize , 34usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Option" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "core" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["core" , "option" , "Option"] , kind : erised :: types :: ItemKind :: Enum }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "StructField" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: StructField as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }))] , bindings : & [] }) }) })]) , discriminant : None } , erised :: types :: Variant { name : "Plain" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "StructKind" , "Plain"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (343usize , 4usize) , end : (346usize , 5usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("A struct with nammed fields.\n\n```rust\npub struct PlainStruct { x: i32 }\npub struct EmptyPlainStruct {}\n```") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Struct { fields : & [erised :: types :: StructField { name : Some ("fields") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (344usize , 8usize) , end : (344usize , 32usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "StructField" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: StructField as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("fields_stripped") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (345usize , 8usize) , end : (345usize , 29usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: Primitive ("bool") }] , fields_stripped : false } , discriminant : None }] , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticStructKind {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticStructKind",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticStructKind"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (320usize, 23usize),
                    end: (320usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Unit",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticStructKind", "Unit"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (327usize, 4usize),
                            end: (327usize, 8usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Tuple",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticStructKind", "Tuple"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (320usize, 23usize),
                            end: (320usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (320usize, 23usize),
                                end: (320usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "Option",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "core",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["core", "option", "Option"],
                                            kind: erised::types::ItemKind::Enum,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "StaticStructField",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: StaticStructField as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            ),
                                        )],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Plain",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticStructKind", "Plain"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (320usize, 23usize),
                            end: (320usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("fields"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (320usize, 23usize),
                                        end: (320usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Slice(
                                        erised::types::Type::ResolvedPath(erised::types::Path {
                                            name: "StaticStructField",
                                            prefix: "",
                                            target: erised::types::Identifiable::Item(|| {
                                                < :: erised :: heap_types :: StaticStructField as Reflect > :: TYPE_INFO
                                            }),
                                            args: Some(|| {
                                                erised::types::GenericArgs::AngleBracketed {
                                                    args: &[],
                                                    bindings: &[],
                                                }
                                            }),
                                        }),
                                    ),
                                },
                            },
                            erised::types::StructField {
                                name: Some("fields_stripped"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (345usize, 8usize),
                                        end: (345usize, 29usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::Primitive("bool"),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StructField {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StructField",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StructField"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (350usize, 0usize),
                    end: (354usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (351usize, 4usize),
                                end: (351usize, 28usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "String",
                                        prefix: "",
                                        target: erised::types::Identifiable::Summary(|| {
                                            erised::types::ItemSummary {
                                                krate: || erised::types::ExternalCrate {
                                                    name: "alloc",
                                                    html_root_url: Some(
                                                        "https://doc.rust-lang.org/nightly/",
                                                    ),
                                                },
                                                path: &["alloc", "string", "String"],
                                                kind: erised::types::ItemKind::Struct,
                                            }
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (352usize, 4usize),
                                end: (352usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "ItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::ItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("ty"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (353usize, 4usize),
                                end: (353usize, 16usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Type",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Type as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticStructField {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticStructField",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticStructField"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (349usize, 23usize),
                    end: (349usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (349usize, 23usize),
                                end: (349usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::BorrowedRef {
                                        lifetime: Some("'static"),
                                        mutable: false,
                                        type_: erised::types::Type::Primitive("str"),
                                    },
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (352usize, 4usize),
                                end: (352usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("ty"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (353usize, 4usize),
                                end: (353usize, 16usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticType",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Enum {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "Enum",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Enum"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (357usize, 0usize),
                    end: (364usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (358usize, 4usize),
                                end: (358usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (359usize, 4usize),
                                end: (359usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "ItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::ItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (360usize, 4usize),
                                end: (360usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Generics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Generics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("variants_stripped"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (361usize, 4usize),
                                end: (361usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("variants"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (362usize, 4usize),
                                end: (362usize, 30usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "Variant",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            <::erised::heap_types::Variant as Reflect>::TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("impls"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (363usize, 4usize),
                                end: (363usize, 32usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "Identifiable",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: Identifiable as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticEnum {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticEnum",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticEnum"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (356usize, 23usize),
                    end: (356usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (356usize, 23usize),
                                end: (356usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (359usize, 4usize),
                                end: (359usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (360usize, 4usize),
                                end: (360usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticGenerics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticGenerics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("variants_stripped"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (361usize, 4usize),
                                end: (361usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("variants"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (356usize, 23usize),
                                end: (356usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticVariant",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::StaticVariant as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                    erised::types::StructField {
                        name: Some("impls"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (356usize, 23usize),
                                end: (356usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticIdentifiable",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticIdentifiable as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Variant {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Struct (erised :: types :: Struct { name : "Variant" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Variant"] , kind : erised :: types :: ItemKind :: Struct }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (367usize , 0usize) , end : (374usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: StructKind :: Plain { fields : & [erised :: types :: StructField { name : Some ("name") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (368usize , 4usize) , end : (368usize , 20usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("meta") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (369usize , 4usize) , end : (369usize , 22usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "ItemMeta" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: ItemMeta as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("kind") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (371usize , 4usize) , end : (371usize , 25usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("Whether the variant is plain, a tuple-like, or struct-like. Contains the fields.") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "VariantKind" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: VariantKind as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("discriminant") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (373usize , 4usize) , end : (373usize , 42usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("The discriminant, if explicitly specified.") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Option" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "core" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["core" , "option" , "Option"] , kind : erised :: types :: ItemKind :: Enum }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Discriminant" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Discriminant as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) }] , fields_stripped : false } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticVariant {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticVariant",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticVariant"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (366usize, 23usize),
                    end: (366usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (366usize, 23usize),
                                end: (366usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (369usize, 4usize),
                                end: (369usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("kind"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (371usize, 4usize),
                                end: (371usize, 25usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticVariantKind",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticVariantKind as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("discriminant"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (366usize, 23usize),
                                end: (366usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "StaticDiscriminant",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: StaticDiscriminant as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::VariantKind {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Enum (erised :: types :: Enum { name : "VariantKind" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "VariantKind"] , kind : erised :: types :: ItemKind :: Enum }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (377usize , 0usize) , end : (411usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , variants_stripped : false , variants : & [erised :: types :: Variant { name : "Plain" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "VariantKind" , "Plain"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (386usize , 4usize) , end : (386usize , 9usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("A variant with no parentheses\n\n```rust\nenum Demo {\n    PlainVariant,\n    PlainWithDiscriminant = 1,\n}\n```") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Plain , discriminant : None } , erised :: types :: Variant { name : "Tuple" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "VariantKind" , "Tuple"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (398usize , 4usize) , end : (398usize , 35usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("A variant with unnamed fields.\n\nUnlike most of json, `#[doc(hidden)]` fields will be given as `None`\ninstead of being omitted, because order matters.\n\n```rust\nenum Demo {\n    TupleVariant(i32),\n    EmptyTupleVariant(),\n}\n```") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (398usize , 10usize) , end : (398usize , 34usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Option" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "core" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["core" , "option" , "Option"] , kind : erised :: types :: ItemKind :: Enum }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "StructField" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: StructField as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }))] , bindings : & [] }) }) })]) , discriminant : None } , erised :: types :: Variant { name : "Struct" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "VariantKind" , "Struct"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (407usize , 4usize) , end : (410usize , 5usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("A variant with named fields.\n\n```rust\nenum Demo {\n    StructVariant { x: i32 },\n    EmptyStructVariant {},\n}\n```") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Struct { fields : & [erised :: types :: StructField { name : Some ("fields") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (408usize , 8usize) , end : (408usize , 32usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "StructField" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: StructField as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("fields_stripped") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (409usize , 8usize) , end : (409usize , 29usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: Primitive ("bool") }] , fields_stripped : false } , discriminant : None }] , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticVariantKind {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticVariantKind",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticVariantKind"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (376usize, 23usize),
                    end: (376usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Plain",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticVariantKind", "Plain"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (386usize, 4usize),
                            end: (386usize, 9usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Tuple",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticVariantKind", "Tuple"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (376usize, 23usize),
                            end: (376usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (376usize, 23usize),
                                end: (376usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "Option",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "core",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["core", "option", "Option"],
                                            kind: erised::types::ItemKind::Enum,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "StaticStructField",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: StaticStructField as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            ),
                                        )],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Struct",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticVariantKind", "Struct"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (376usize, 23usize),
                            end: (376usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("fields"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (376usize, 23usize),
                                        end: (376usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Slice(
                                        erised::types::Type::ResolvedPath(erised::types::Path {
                                            name: "StaticStructField",
                                            prefix: "",
                                            target: erised::types::Identifiable::Item(|| {
                                                < :: erised :: heap_types :: StaticStructField as Reflect > :: TYPE_INFO
                                            }),
                                            args: Some(|| {
                                                erised::types::GenericArgs::AngleBracketed {
                                                    args: &[],
                                                    bindings: &[],
                                                }
                                            }),
                                        }),
                                    ),
                                },
                            },
                            erised::types::StructField {
                                name: Some("fields_stripped"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (409usize, 8usize),
                                        end: (409usize, 29usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::Primitive("bool"),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Discriminant {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Struct (erised :: types :: Struct { name : "Discriminant" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Discriminant"] , kind : erised :: types :: ItemKind :: Struct }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (414usize , 0usize) , end : (428usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: StructKind :: Plain { fields : & [erised :: types :: StructField { name : Some ("expr") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (423usize , 4usize) , end : (423usize , 20usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("The expression that produced the discriminant.\n\nUnlike `value`, this preserves the original formatting (eg suffixes,\nhexadecimal, and underscores), making it unsuitable to be machine\ninterpreted.\n\nIn some cases, when the value is to complex, this may be `\"{ _ }\"`.\nWhen this occurs is unstable, and may change without notice.") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("value") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (427usize , 4usize) , end : (427usize , 21usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("The numerical value of the discriminant. Stored as a string due to\nJSON's poor support for large integers, and the fact that it would need\nto store from [`i128::MIN`] to [`u128::MAX`].") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) }] , fields_stripped : false } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticDiscriminant {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticDiscriminant",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticDiscriminant"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (413usize, 23usize),
                    end: (413usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("expr"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (413usize, 23usize),
                                end: (413usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("value"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (413usize, 23usize),
                                end: (413usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Header {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "Header",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Header"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (431usize, 0usize),
                    end: (436usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("const_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (432usize, 4usize),
                                end: (432usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("unsafe_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (433usize, 4usize),
                                end: (433usize, 21usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("async_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (434usize, 4usize),
                                end: (434usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("abi"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (435usize, 4usize),
                                end: (435usize, 16usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Abi",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Abi as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticHeader {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticHeader",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticHeader"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (430usize, 23usize),
                    end: (430usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("const_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (432usize, 4usize),
                                end: (432usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("unsafe_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (433usize, 4usize),
                                end: (433usize, 21usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("async_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (434usize, 4usize),
                                end: (434usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("abi"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (435usize, 4usize),
                                end: (435usize, 16usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticAbi",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticAbi as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Abi {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "Abi",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Abi"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (439usize, 0usize),
                    end: (452usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Rust",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Abi", "Rust"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (442usize, 4usize),
                            end: (442usize, 8usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "C",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Abi", "C"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (443usize, 4usize),
                            end: (443usize, 22usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (443usize, 8usize),
                                    end: (443usize, 20usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Cdecl",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Abi", "Cdecl"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (444usize, 4usize),
                            end: (444usize, 26usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (444usize, 12usize),
                                    end: (444usize, 24usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Stdcall",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Abi", "Stdcall"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (445usize, 4usize),
                            end: (445usize, 28usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (445usize, 14usize),
                                    end: (445usize, 26usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Fastcall",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Abi", "Fastcall"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (446usize, 4usize),
                            end: (446usize, 29usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (446usize, 15usize),
                                    end: (446usize, 27usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Aapcs",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Abi", "Aapcs"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (447usize, 4usize),
                            end: (447usize, 26usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (447usize, 12usize),
                                    end: (447usize, 24usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Win64",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Abi", "Win64"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (448usize, 4usize),
                            end: (448usize, 26usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (448usize, 12usize),
                                    end: (448usize, 24usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "SysV64",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Abi", "SysV64"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (449usize, 4usize),
                            end: (449usize, 27usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (449usize, 13usize),
                                    end: (449usize, 25usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "System",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Abi", "System"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (450usize, 4usize),
                            end: (450usize, 27usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (450usize, 13usize),
                                    end: (450usize, 25usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Other",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Abi", "Other"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (451usize, 4usize),
                            end: (451usize, 17usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (451usize, 10usize),
                                end: (451usize, 16usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticAbi {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticAbi",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticAbi"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (438usize, 23usize),
                    end: (438usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Rust",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticAbi", "Rust"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (442usize, 4usize),
                            end: (442usize, 8usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "C",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticAbi", "C"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (438usize, 23usize),
                            end: (438usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (443usize, 8usize),
                                    end: (443usize, 20usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Cdecl",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticAbi", "Cdecl"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (438usize, 23usize),
                            end: (438usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (444usize, 12usize),
                                    end: (444usize, 24usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Stdcall",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticAbi", "Stdcall"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (438usize, 23usize),
                            end: (438usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (445usize, 14usize),
                                    end: (445usize, 26usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Fastcall",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticAbi", "Fastcall"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (438usize, 23usize),
                            end: (438usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (446usize, 15usize),
                                    end: (446usize, 27usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Aapcs",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticAbi", "Aapcs"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (438usize, 23usize),
                            end: (438usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (447usize, 12usize),
                                    end: (447usize, 24usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Win64",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticAbi", "Win64"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (438usize, 23usize),
                            end: (438usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (448usize, 12usize),
                                    end: (448usize, 24usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "SysV64",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticAbi", "SysV64"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (438usize, 23usize),
                            end: (438usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (449usize, 13usize),
                                    end: (449usize, 25usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "System",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticAbi", "System"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (438usize, 23usize),
                            end: (438usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("unwind"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (450usize, 13usize),
                                    end: (450usize, 25usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::Primitive("bool"),
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Other",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticAbi", "Other"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (438usize, 23usize),
                            end: (438usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (438usize, 23usize),
                                end: (438usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    })]),
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Function {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "Function",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Function"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (456usize, 0usize),
                    end: (463usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: Some(
                    "Represents a function (including methods and other associated functions)",
                ),
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (457usize, 4usize),
                                end: (457usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (458usize, 4usize),
                                end: (458usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "ItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::ItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("decl"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (459usize, 4usize),
                                end: (459usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "FnDecl",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::FnDecl as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (460usize, 4usize),
                                end: (460usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Generics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Generics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("header"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (461usize, 4usize),
                                end: (461usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Header",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Header as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("has_body"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (462usize, 4usize),
                                end: (462usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticFunction {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticFunction",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticFunction"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (455usize, 23usize),
                    end: (455usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (455usize, 23usize),
                                end: (455usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (458usize, 4usize),
                                end: (458usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("decl"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (459usize, 4usize),
                                end: (459usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticFnDecl",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticFnDecl as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (460usize, 4usize),
                                end: (460usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticGenerics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticGenerics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("header"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (461usize, 4usize),
                                end: (461usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticHeader",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticHeader as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("has_body"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (462usize, 4usize),
                                end: (462usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Generics {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "Generics",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Generics"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (466usize, 0usize),
                    end: (469usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("params"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (467usize, 4usize),
                                end: (467usize, 36usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "GenericParamDef",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: GenericParamDef as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("where_predicates"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (468usize, 4usize),
                                end: (468usize, 45usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "WherePredicate",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: WherePredicate as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticGenerics {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticGenerics",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticGenerics"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (465usize, 23usize),
                    end: (465usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("params"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (465usize, 23usize),
                                end: (465usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticGenericParamDef",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticGenericParamDef as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                    erised::types::StructField {
                        name: Some("where_predicates"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (465usize, 23usize),
                                end: (465usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticWherePredicate",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticWherePredicate as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::GenericParamDef {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "GenericParamDef",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "GenericParamDef"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (472usize, 0usize),
                    end: (475usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (473usize, 4usize),
                                end: (473usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("kind"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (474usize, 4usize),
                                end: (474usize, 33usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "GenericParamDefKind",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::GenericParamDefKind as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticGenericParamDef {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticGenericParamDef",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticGenericParamDef"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (471usize, 23usize),
                    end: (471usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (471usize, 23usize),
                                end: (471usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("kind"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (474usize, 4usize),
                                end: (474usize, 33usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticGenericParamDefKind",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                < :: erised :: heap_types :: StaticGenericParamDefKind as Reflect > :: TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::GenericParamDefKind {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Enum (erised :: types :: Enum { name : "GenericParamDefKind" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "GenericParamDefKind"] , kind : erised :: types :: ItemKind :: Enum }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (478usize , 0usize) , end : (514usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , variants_stripped : false , variants : & [erised :: types :: Variant { name : "Lifetime" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "GenericParamDefKind" , "Lifetime"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (479usize , 4usize) , end : (481usize , 5usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Struct { fields : & [erised :: types :: StructField { name : Some ("outlives") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (480usize , 8usize) , end : (480usize , 29usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) }] , fields_stripped : false } , discriminant : None } , erised :: types :: Variant { name : "Type" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "GenericParamDefKind" , "Type"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (482usize , 4usize) , end : (509usize , 5usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Struct { fields : & [erised :: types :: StructField { name : Some ("bounds") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (483usize , 8usize) , end : (483usize , 33usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "GenericBound" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: GenericBound as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("default") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (484usize , 8usize) , end : (484usize , 29usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Option" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "core" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["core" , "option" , "Option"] , kind : erised :: types :: ItemKind :: Enum }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Type" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Type as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("synthetic") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (508usize , 8usize) , end : (508usize , 23usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("This is normally `false`, which means that this generic parameter is\ndeclared in the Rust source text.\n\nIf it is `true`, this generic parameter has been introduced by the\ncompiler behind the scenes.\n\n# Example\n\nConsider\n\n```ignore (pseudo-rust)\npub fn f(_: impl Trait) {}\n```\n\nThe compiler will transform this behind the scenes to\n\n```ignore (pseudo-rust)\npub fn f<impl Trait: Trait>(_: impl Trait) {}\n```\n\nIn this example, the generic parameter named `impl Trait` (and which\nis bound by `Trait`) is synthetic, because it was not originally in\nthe Rust source text.") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: Primitive ("bool") }] , fields_stripped : false } , discriminant : None } , erised :: types :: Variant { name : "Const" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "GenericParamDefKind" , "Const"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (510usize , 4usize) , end : (513usize , 5usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Struct { fields : & [erised :: types :: StructField { name : Some ("type_") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (511usize , 8usize) , end : (511usize , 19usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Type" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Type as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("default") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (512usize , 8usize) , end : (512usize , 31usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Option" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "core" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["core" , "option" , "Option"] , kind : erised :: types :: ItemKind :: Enum }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) }] , fields_stripped : false } , discriminant : None }] , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticGenericParamDefKind {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticGenericParamDefKind",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticGenericParamDefKind"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (477usize, 23usize),
                    end: (477usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Lifetime",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &[
                                "erised",
                                "heap_types",
                                "StaticGenericParamDefKind",
                                "Lifetime",
                            ],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (477usize, 23usize),
                            end: (477usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[erised::types::StructField {
                            name: Some("outlives"),
                            meta: erised::types::ItemMeta {
                                krate: || erised::types::ExternalCrate {
                                    name: "erised",
                                    html_root_url: None,
                                },
                                summary: None,
                                span: Some(erised::types::Span {
                                    filename: "crates/lib/src/heap_types.rs",
                                    begin: (477usize, 23usize),
                                    end: (477usize, 31usize),
                                }),
                                visibility: erised::types::Visibility::Default,
                                docs: None,
                                attrs: &[],
                                deprecation: None,
                            },
                            ty: erised::types::Type::BorrowedRef {
                                lifetime: Some("'static"),
                                mutable: false,
                                type_: erised::types::Type::Slice(
                                    erised::types::Type::BorrowedRef {
                                        lifetime: Some("'static"),
                                        mutable: false,
                                        type_: erised::types::Type::Primitive("str"),
                                    },
                                ),
                            },
                        }],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Type",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticGenericParamDefKind", "Type"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (477usize, 23usize),
                            end: (477usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("bounds"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (477usize, 23usize),
                                        end: (477usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Slice(
                                        erised::types::Type::ResolvedPath(erised::types::Path {
                                            name: "StaticGenericBound",
                                            prefix: "",
                                            target: erised::types::Identifiable::Item(|| {
                                                < :: erised :: heap_types :: StaticGenericBound as Reflect > :: TYPE_INFO
                                            }),
                                            args: Some(|| {
                                                erised::types::GenericArgs::AngleBracketed {
                                                    args: &[],
                                                    bindings: &[],
                                                }
                                            }),
                                        }),
                                    ),
                                },
                            },
                            erised::types::StructField {
                                name: Some("default"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (477usize, 23usize),
                                        end: (477usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Option",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "core",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["core", "option", "Option"],
                                            kind: erised::types::ItemKind::Enum,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "StaticType",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: StaticType as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            ),
                                        )],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("synthetic"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (508usize, 8usize),
                                        end: (508usize, 23usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::Primitive("bool"),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Const",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticGenericParamDefKind", "Const"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (477usize, 23usize),
                            end: (477usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("type_"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (511usize, 8usize),
                                        end: (511usize, 19usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "StaticType",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("default"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (477usize, 23usize),
                                        end: (477usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Option",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "core",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["core", "option", "Option"],
                                            kind: erised::types::ItemKind::Enum,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::BorrowedRef {
                                                lifetime: Some("'static"),
                                                mutable: false,
                                                type_: erised::types::Type::Primitive("str"),
                                            },
                                        )],
                                        bindings: &[],
                                    }),
                                }),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::WherePredicate {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Enum (erised :: types :: Enum { name : "WherePredicate" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "WherePredicate"] , kind : erised :: types :: ItemKind :: Enum }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (517usize , 0usize) , end : (538usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , variants_stripped : false , variants : & [erised :: types :: Variant { name : "BoundPredicate" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "WherePredicate" , "BoundPredicate"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (518usize , 4usize) , end : (529usize , 5usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Struct { fields : & [erised :: types :: StructField { name : Some ("type_") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (519usize , 8usize) , end : (519usize , 19usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Type" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Type as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("bounds") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (520usize , 8usize) , end : (520usize , 33usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "GenericBound" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: GenericBound as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("generic_params") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (528usize , 8usize) , end : (528usize , 44usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("Used for Higher-Rank Trait Bounds (HRTBs)\n```text\nwhere for<'a> &'a T: Iterator,\"\n      ^^^^^^^\n      |\n      this part\n```") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "GenericParamDef" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: GenericParamDef as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) }] , fields_stripped : false } , discriminant : None } , erised :: types :: Variant { name : "RegionPredicate" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "WherePredicate" , "RegionPredicate"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (530usize , 4usize) , end : (533usize , 5usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Struct { fields : & [erised :: types :: StructField { name : Some ("lifetime") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (531usize , 8usize) , end : (531usize , 24usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("bounds") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (532usize , 8usize) , end : (532usize , 33usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "GenericBound" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: GenericBound as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) }] , fields_stripped : false } , discriminant : None } , erised :: types :: Variant { name : "EqPredicate" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "WherePredicate" , "EqPredicate"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (534usize , 4usize) , end : (537usize , 5usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Struct { fields : & [erised :: types :: StructField { name : Some ("lhs") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (535usize , 8usize) , end : (535usize , 17usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Type" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Type as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("rhs") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (536usize , 8usize) , end : (536usize , 17usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Term" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Term as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) }] , fields_stripped : false } , discriminant : None }] , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticWherePredicate {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticWherePredicate",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticWherePredicate"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (516usize, 23usize),
                    end: (516usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "BoundPredicate",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &[
                                "erised",
                                "heap_types",
                                "StaticWherePredicate",
                                "BoundPredicate",
                            ],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (516usize, 23usize),
                            end: (516usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("type_"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (519usize, 8usize),
                                        end: (519usize, 19usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "StaticType",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("bounds"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (516usize, 23usize),
                                        end: (516usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Slice(
                                        erised::types::Type::ResolvedPath(erised::types::Path {
                                            name: "StaticGenericBound",
                                            prefix: "",
                                            target: erised::types::Identifiable::Item(|| {
                                                < :: erised :: heap_types :: StaticGenericBound as Reflect > :: TYPE_INFO
                                            }),
                                            args: Some(|| {
                                                erised::types::GenericArgs::AngleBracketed {
                                                    args: &[],
                                                    bindings: &[],
                                                }
                                            }),
                                        }),
                                    ),
                                },
                            },
                            erised::types::StructField {
                                name: Some("generic_params"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (516usize, 23usize),
                                        end: (516usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Slice(
                                        erised::types::Type::ResolvedPath(erised::types::Path {
                                            name: "StaticGenericParamDef",
                                            prefix: "",
                                            target: erised::types::Identifiable::Item(|| {
                                                < :: erised :: heap_types :: StaticGenericParamDef as Reflect > :: TYPE_INFO
                                            }),
                                            args: Some(|| {
                                                erised::types::GenericArgs::AngleBracketed {
                                                    args: &[],
                                                    bindings: &[],
                                                }
                                            }),
                                        }),
                                    ),
                                },
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "RegionPredicate",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &[
                                "erised",
                                "heap_types",
                                "StaticWherePredicate",
                                "RegionPredicate",
                            ],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (516usize, 23usize),
                            end: (516usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("lifetime"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (516usize, 23usize),
                                        end: (516usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Primitive("str"),
                                },
                            },
                            erised::types::StructField {
                                name: Some("bounds"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (516usize, 23usize),
                                        end: (516usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Slice(
                                        erised::types::Type::ResolvedPath(erised::types::Path {
                                            name: "StaticGenericBound",
                                            prefix: "",
                                            target: erised::types::Identifiable::Item(|| {
                                                < :: erised :: heap_types :: StaticGenericBound as Reflect > :: TYPE_INFO
                                            }),
                                            args: Some(|| {
                                                erised::types::GenericArgs::AngleBracketed {
                                                    args: &[],
                                                    bindings: &[],
                                                }
                                            }),
                                        }),
                                    ),
                                },
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "EqPredicate",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &[
                                "erised",
                                "heap_types",
                                "StaticWherePredicate",
                                "EqPredicate",
                            ],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (516usize, 23usize),
                            end: (516usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("lhs"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (535usize, 8usize),
                                        end: (535usize, 17usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "StaticType",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("rhs"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (536usize, 8usize),
                                        end: (536usize, 17usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "StaticTerm",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::StaticTerm as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::GenericBound {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Enum (erised :: types :: Enum { name : "GenericBound" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "GenericBound"] , kind : erised :: types :: ItemKind :: Enum }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (541usize , 0usize) , end : (555usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , variants_stripped : false , variants : & [erised :: types :: Variant { name : "TraitBound" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "GenericBound" , "TraitBound"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (542usize , 4usize) , end : (553usize , 5usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Struct { fields : & [erised :: types :: StructField { name : Some ("trait_") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (543usize , 8usize) , end : (543usize , 20usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Path" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Path as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("generic_params") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (551usize , 8usize) , end : (551usize , 44usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("Used for Higher-Rank Trait Bounds (HRTBs)\n```text\nwhere F: for<'a, 'b> Fn(&'a u8, &'b u8)\n         ^^^^^^^^^^^\n         |\n         this part\n```") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "GenericParamDef" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: GenericParamDef as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("modifier") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (552usize , 8usize) , end : (552usize , 36usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "TraitBoundModifier" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: TraitBoundModifier as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) }] , fields_stripped : false } , discriminant : None } , erised :: types :: Variant { name : "Outlives" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "GenericBound" , "Outlives"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (554usize , 4usize) , end : (554usize , 20usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (554usize , 13usize) , end : (554usize , 19usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) })]) , discriminant : None }] , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticGenericBound {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticGenericBound",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticGenericBound"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (540usize, 23usize),
                    end: (540usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "TraitBound",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticGenericBound", "TraitBound"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (540usize, 23usize),
                            end: (540usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("trait_"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (543usize, 8usize),
                                        end: (543usize, 20usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "StaticPath",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::StaticPath as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("generic_params"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (540usize, 23usize),
                                        end: (540usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Slice(
                                        erised::types::Type::ResolvedPath(erised::types::Path {
                                            name: "StaticGenericParamDef",
                                            prefix: "",
                                            target: erised::types::Identifiable::Item(|| {
                                                < :: erised :: heap_types :: StaticGenericParamDef as Reflect > :: TYPE_INFO
                                            }),
                                            args: Some(|| {
                                                erised::types::GenericArgs::AngleBracketed {
                                                    args: &[],
                                                    bindings: &[],
                                                }
                                            }),
                                        }),
                                    ),
                                },
                            },
                            erised::types::StructField {
                                name: Some("modifier"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (552usize, 8usize),
                                        end: (552usize, 36usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "StaticTraitBoundModifier",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticTraitBoundModifier as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Outlives",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticGenericBound", "Outlives"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (540usize, 23usize),
                            end: (540usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (540usize, 23usize),
                                end: (540usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    })]),
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::TraitBoundModifier {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "TraitBoundModifier",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "TraitBoundModifier"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (558usize, 0usize),
                    end: (562usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "None",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "TraitBoundModifier", "None"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (559usize, 4usize),
                            end: (559usize, 8usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Maybe",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "TraitBoundModifier", "Maybe"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (560usize, 4usize),
                            end: (560usize, 9usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "MaybeConst",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "TraitBoundModifier", "MaybeConst"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (561usize, 4usize),
                            end: (561usize, 14usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticTraitBoundModifier {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticTraitBoundModifier",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticTraitBoundModifier"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (557usize, 23usize),
                    end: (557usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "None",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticTraitBoundModifier", "None"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (559usize, 4usize),
                            end: (559usize, 8usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Maybe",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticTraitBoundModifier", "Maybe"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (560usize, 4usize),
                            end: (560usize, 9usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "MaybeConst",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &[
                                "erised",
                                "heap_types",
                                "StaticTraitBoundModifier",
                                "MaybeConst",
                            ],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (561usize, 4usize),
                            end: (561usize, 14usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Term {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "Term",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Term"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (565usize, 0usize),
                    end: (568usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Type",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Term", "Type"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (566usize, 4usize),
                            end: (566usize, 14usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (566usize, 9usize),
                                end: (566usize, 13usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Type",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Type as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Constant",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Term", "Constant"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (567usize, 4usize),
                            end: (567usize, 22usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (567usize, 13usize),
                                end: (567usize, 21usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Constant",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Constant as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticTerm {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticTerm",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticTerm"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (564usize, 23usize),
                    end: (564usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Type",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticTerm", "Type"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (564usize, 23usize),
                            end: (564usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (566usize, 9usize),
                                end: (566usize, 13usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticType",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Constant",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticTerm", "Constant"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (564usize, 23usize),
                            end: (564usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (567usize, 13usize),
                                end: (567usize, 21usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticConstant",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticConstant as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Type {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Enum (erised :: types :: Enum { name : "Type" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Type"] , kind : erised :: types :: ItemKind :: Enum }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (571usize , 0usize) , end : (612usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , variants_stripped : false , variants : & [erised :: types :: Variant { name : "ResolvedPath" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Type" , "ResolvedPath"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (573usize , 4usize) , end : (573usize , 22usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("Structs, enums, and unions") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (573usize , 17usize) , end : (573usize , 21usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Path" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Path as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) })]) , discriminant : None } , erised :: types :: Variant { name : "DynTrait" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Type" , "DynTrait"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (574usize , 4usize) , end : (574usize , 22usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (574usize , 13usize) , end : (574usize , 21usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "DynTrait" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: DynTrait as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) })]) , discriminant : None } , erised :: types :: Variant { name : "Generic" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Type" , "Generic"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (576usize , 4usize) , end : (576usize , 19usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("Parameterized types") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (576usize , 12usize) , end : (576usize , 18usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) })]) , discriminant : None } , erised :: types :: Variant { name : "Primitive" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Type" , "Primitive"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (578usize , 4usize) , end : (578usize , 21usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("Built in numberic (i*, u*, f*) types, bool, and char") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (578usize , 14usize) , end : (578usize , 20usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) })]) , discriminant : None } , erised :: types :: Variant { name : "FunctionPointer" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Type" , "FunctionPointer"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (580usize , 4usize) , end : (580usize , 41usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("`extern \"ABI\" fn`") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (580usize , 20usize) , end : (580usize , 40usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Box" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "boxed" , "Box"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "FunctionPointer" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: FunctionPointer as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) })]) , discriminant : None } , erised :: types :: Variant { name : "Tuple" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Type" , "Tuple"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (582usize , 4usize) , end : (582usize , 20usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("`(String, u32, Box<usize>)`") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (582usize , 10usize) , end : (582usize , 19usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Type" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Type as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) })]) , discriminant : None } , erised :: types :: Variant { name : "Slice" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Type" , "Slice"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (584usize , 4usize) , end : (584usize , 20usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("`[u32]`") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (584usize , 10usize) , end : (584usize , 19usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Box" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "boxed" , "Box"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Type" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Type as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) })]) , discriminant : None } , erised :: types :: Variant { name : "Array" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Type" , "Array"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (586usize , 4usize) , end : (589usize , 5usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("[u32; 15]") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Struct { fields : & [erised :: types :: StructField { name : Some ("type_") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (587usize , 8usize) , end : (587usize , 24usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Box" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "boxed" , "Box"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Type" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Type as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("len") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (588usize , 8usize) , end : (588usize , 19usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) }] , fields_stripped : false } , discriminant : None } , erised :: types :: Variant { name : "ImplTrait" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Type" , "ImplTrait"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (591usize , 4usize) , end : (591usize , 32usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("`impl TraitA + TraitB + ...`") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (591usize , 14usize) , end : (591usize , 31usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "GenericBound" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: GenericBound as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) })]) , discriminant : None } , erised :: types :: Variant { name : "Infer" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Type" , "Infer"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (593usize , 4usize) , end : (593usize , 9usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("`_`") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Plain , discriminant : None } , erised :: types :: Variant { name : "RawPointer" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Type" , "RawPointer"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (595usize , 4usize) , end : (598usize , 5usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("`*mut u32`, `*u8`, etc.") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Struct { fields : & [erised :: types :: StructField { name : Some ("mutable") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (596usize , 8usize) , end : (596usize , 21usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: Primitive ("bool") } , erised :: types :: StructField { name : Some ("type_") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (597usize , 8usize) , end : (597usize , 24usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Box" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "boxed" , "Box"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Type" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Type as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) }] , fields_stripped : false } , discriminant : None } , erised :: types :: Variant { name : "BorrowedRef" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Type" , "BorrowedRef"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (600usize , 4usize) , end : (604usize , 5usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("`&'a mut String`, `&str`, etc.") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Struct { fields : & [erised :: types :: StructField { name : Some ("lifetime") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (601usize , 8usize) , end : (601usize , 32usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Option" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "core" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["core" , "option" , "Option"] , kind : erised :: types :: ItemKind :: Enum }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("mutable") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (602usize , 8usize) , end : (602usize , 21usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: Primitive ("bool") } , erised :: types :: StructField { name : Some ("type_") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (603usize , 8usize) , end : (603usize , 24usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Box" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "boxed" , "Box"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Type" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Type as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) }] , fields_stripped : false } , discriminant : None } , erised :: types :: Variant { name : "QualifiedPath" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Type" , "QualifiedPath"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (606usize , 4usize) , end : (611usize , 5usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("`<Type as Trait>::Name` or associated types like `T::Item` where `T: Iterator`") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Struct { fields : & [erised :: types :: StructField { name : Some ("name") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (607usize , 8usize) , end : (607usize , 20usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("args") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (608usize , 8usize) , end : (608usize , 30usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Box" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "boxed" , "Box"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "GenericArgs" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: GenericArgs as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("self_type") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (609usize , 8usize) , end : (609usize , 28usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Box" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "boxed" , "Box"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Type" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Type as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("trait_") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (610usize , 8usize) , end : (610usize , 20usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Path" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Path as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) }] , fields_stripped : false } , discriminant : None }] , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticType {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticType",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticType"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (570usize, 23usize),
                    end: (570usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "ResolvedPath",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticType", "ResolvedPath"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (570usize, 23usize),
                            end: (570usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (573usize, 17usize),
                                end: (573usize, 21usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticPath",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticPath as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "DynTrait",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticType", "DynTrait"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (570usize, 23usize),
                            end: (570usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (574usize, 13usize),
                                end: (574usize, 21usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticDynTrait",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticDynTrait as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Generic",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticType", "Generic"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (570usize, 23usize),
                            end: (570usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (570usize, 23usize),
                                end: (570usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Primitive",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticType", "Primitive"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (570usize, 23usize),
                            end: (570usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (570usize, 23usize),
                                end: (570usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "FunctionPointer",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticType", "FunctionPointer"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (570usize, 23usize),
                            end: (570usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (570usize, 23usize),
                                end: (570usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::FunctionPointer(erised::types::FunctionPointer {
                            decl: erised::types::FnDecl {
                                inputs: &[],
                                output: Some(erised::types::Type::ResolvedPath(
                                    erised::types::Path {
                                        name: "StaticFunctionPointer",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: StaticFunctionPointer as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    },
                                )),
                                c_variadic: false,
                            },
                            generic_params: &[],
                            header: erised::types::Header {
                                const_: false,
                                unsafe_: false,
                                async_: false,
                                abi: erised::types::Abi::Rust,
                            },
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Tuple",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticType", "Tuple"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (570usize, 23usize),
                            end: (570usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (570usize, 23usize),
                                end: (570usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticType",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Slice",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticType", "Slice"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (570usize, 23usize),
                            end: (570usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (570usize, 23usize),
                                end: (570usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::FunctionPointer(erised::types::FunctionPointer {
                            decl: erised::types::FnDecl {
                                inputs: &[],
                                output: Some(erised::types::Type::ResolvedPath(
                                    erised::types::Path {
                                        name: "StaticType",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    },
                                )),
                                c_variadic: false,
                            },
                            generic_params: &[],
                            header: erised::types::Header {
                                const_: false,
                                unsafe_: false,
                                async_: false,
                                abi: erised::types::Abi::Rust,
                            },
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Array",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticType", "Array"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (570usize, 23usize),
                            end: (570usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("type_"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (587usize, 8usize),
                                        end: (587usize, 23usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::FunctionPointer(
                                    erised::types::FunctionPointer {
                                        decl: erised::types::FnDecl {
                                            inputs: &[],
                                            output: Some(erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "StaticType",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: StaticType as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            )),
                                            c_variadic: false,
                                        },
                                        generic_params: &[],
                                        header: erised::types::Header {
                                            const_: false,
                                            unsafe_: false,
                                            async_: false,
                                            abi: erised::types::Abi::Rust,
                                        },
                                    },
                                ),
                            },
                            erised::types::StructField {
                                name: Some("len"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (570usize, 23usize),
                                        end: (570usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Primitive("str"),
                                },
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "ImplTrait",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticType", "ImplTrait"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (570usize, 23usize),
                            end: (570usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (570usize, 23usize),
                                end: (570usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticGenericBound",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticGenericBound as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Infer",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticType", "Infer"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (593usize, 4usize),
                            end: (593usize, 9usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "RawPointer",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticType", "RawPointer"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (570usize, 23usize),
                            end: (570usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("mutable"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (596usize, 8usize),
                                        end: (596usize, 21usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::Primitive("bool"),
                            },
                            erised::types::StructField {
                                name: Some("type_"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (597usize, 8usize),
                                        end: (597usize, 23usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::FunctionPointer(
                                    erised::types::FunctionPointer {
                                        decl: erised::types::FnDecl {
                                            inputs: &[],
                                            output: Some(erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "StaticType",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: StaticType as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            )),
                                            c_variadic: false,
                                        },
                                        generic_params: &[],
                                        header: erised::types::Header {
                                            const_: false,
                                            unsafe_: false,
                                            async_: false,
                                            abi: erised::types::Abi::Rust,
                                        },
                                    },
                                ),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "BorrowedRef",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticType", "BorrowedRef"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (570usize, 23usize),
                            end: (570usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("lifetime"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (570usize, 23usize),
                                        end: (570usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Option",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "core",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["core", "option", "Option"],
                                            kind: erised::types::ItemKind::Enum,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::BorrowedRef {
                                                lifetime: Some("'static"),
                                                mutable: false,
                                                type_: erised::types::Type::Primitive("str"),
                                            },
                                        )],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("mutable"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (602usize, 8usize),
                                        end: (602usize, 21usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::Primitive("bool"),
                            },
                            erised::types::StructField {
                                name: Some("type_"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (603usize, 8usize),
                                        end: (603usize, 23usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::FunctionPointer(
                                    erised::types::FunctionPointer {
                                        decl: erised::types::FnDecl {
                                            inputs: &[],
                                            output: Some(erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "StaticType",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: StaticType as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            )),
                                            c_variadic: false,
                                        },
                                        generic_params: &[],
                                        header: erised::types::Header {
                                            const_: false,
                                            unsafe_: false,
                                            async_: false,
                                            abi: erised::types::Abi::Rust,
                                        },
                                    },
                                ),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "QualifiedPath",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticType", "QualifiedPath"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (570usize, 23usize),
                            end: (570usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("name"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (570usize, 23usize),
                                        end: (570usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Primitive("str"),
                                },
                            },
                            erised::types::StructField {
                                name: Some("args"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (608usize, 8usize),
                                        end: (608usize, 29usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::FunctionPointer(
                                    erised::types::FunctionPointer {
                                        decl: erised::types::FnDecl {
                                            inputs: &[],
                                            output: Some(erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "StaticGenericArgs",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: StaticGenericArgs as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            )),
                                            c_variadic: false,
                                        },
                                        generic_params: &[],
                                        header: erised::types::Header {
                                            const_: false,
                                            unsafe_: false,
                                            async_: false,
                                            abi: erised::types::Abi::Rust,
                                        },
                                    },
                                ),
                            },
                            erised::types::StructField {
                                name: Some("self_type"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (609usize, 8usize),
                                        end: (609usize, 27usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::FunctionPointer(
                                    erised::types::FunctionPointer {
                                        decl: erised::types::FnDecl {
                                            inputs: &[],
                                            output: Some(erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "StaticType",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: StaticType as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            )),
                                            c_variadic: false,
                                        },
                                        generic_params: &[],
                                        header: erised::types::Header {
                                            const_: false,
                                            unsafe_: false,
                                            async_: false,
                                            abi: erised::types::Abi::Rust,
                                        },
                                    },
                                ),
                            },
                            erised::types::StructField {
                                name: Some("trait_"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (610usize, 8usize),
                                        end: (610usize, 20usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "StaticPath",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::StaticPath as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Path {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Struct (erised :: types :: Struct { name : "Path" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Path"] , kind : erised :: types :: ItemKind :: Struct }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (615usize , 0usize) , end : (631usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: StructKind :: Plain { fields : & [erised :: types :: StructField { name : Some ("name") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (618usize , 4usize) , end : (618usize , 20usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("Last segment of the path,\nfor example `Cow` in `std::borrow::Cow`") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("prefix") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (621usize , 4usize) , end : (621usize , 22usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("Everything before the name,\nfor example `std::borrow` in `std::borrow::Cow`") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("target") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (622usize , 4usize) , end : (622usize , 28usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Identifiable" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Identifiable as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("args") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (630usize , 4usize) , end : (630usize , 38usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("Generic arguments to the type\n```test\nstd::borrow::Cow<'static, str>\n                ^^^^^^^^^^^^^^\n                |\n                this part\n```") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Option" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "core" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["core" , "option" , "Option"] , kind : erised :: types :: ItemKind :: Enum }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Box" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "boxed" , "Box"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "GenericArgs" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: GenericArgs as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }))] , bindings : & [] }) }) }] , fields_stripped : false } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticPath {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticPath",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticPath"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (614usize, 23usize),
                    end: (614usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (614usize, 23usize),
                                end: (614usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("prefix"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (614usize, 23usize),
                                end: (614usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("target"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (622usize, 4usize),
                                end: (622usize, 28usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticIdentifiable",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticIdentifiable as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("args"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (614usize, 23usize),
                                end: (614usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::FunctionPointer(
                                        erised::types::FunctionPointer {
                                            decl: erised::types::FnDecl {
                                                inputs: &[],
                                                output: Some(erised::types::Type::ResolvedPath(
                                                    erised::types::Path {
                                                        name: "StaticGenericArgs",
                                                        prefix: "",
                                                        target: erised::types::Identifiable::Item(
                                                            || {
                                                                < :: erised :: heap_types :: StaticGenericArgs as Reflect > :: TYPE_INFO
                                                            },
                                                        ),
                                                        args: Some(|| {
                                                            erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }
                                                        }),
                                                    },
                                                )),
                                                c_variadic: false,
                                            },
                                            generic_params: &[],
                                            header: erised::types::Header {
                                                const_: false,
                                                unsafe_: false,
                                                async_: false,
                                                abi: erised::types::Abi::Rust,
                                            },
                                        },
                                    ),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::FunctionPointer {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Struct (erised :: types :: Struct { name : "FunctionPointer" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "FunctionPointer"] , kind : erised :: types :: ItemKind :: Struct }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (634usize , 0usize) , end : (645usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: StructKind :: Plain { fields : & [erised :: types :: StructField { name : Some ("decl") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (635usize , 4usize) , end : (635usize , 20usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "FnDecl" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: FnDecl as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("generic_params") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (643usize , 4usize) , end : (643usize , 44usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("Used for Higher-Rank Trait Bounds (HRTBs)\n```text\nfor<'c> fn(val: &'c i32) -> i32\n^^^^^^^\n      |\n      this part\n```") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "GenericParamDef" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: GenericParamDef as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("header") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (644usize , 4usize) , end : (644usize , 22usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Header" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Header as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) }] , fields_stripped : false } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticFunctionPointer {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticFunctionPointer",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticFunctionPointer"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (633usize, 23usize),
                    end: (633usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("decl"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (635usize, 4usize),
                                end: (635usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticFnDecl",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticFnDecl as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("generic_params"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (633usize, 23usize),
                                end: (633usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticGenericParamDef",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticGenericParamDef as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                    erised::types::StructField {
                        name: Some("header"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (644usize, 4usize),
                                end: (644usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticHeader",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticHeader as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::FnDecl {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Struct (erised :: types :: Struct { name : "FnDecl" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "FnDecl"] , kind : erised :: types :: ItemKind :: Struct }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (648usize , 0usize) , end : (656usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: StructKind :: Plain { fields : & [erised :: types :: StructField { name : Some ("inputs") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (653usize , 4usize) , end : (653usize , 28usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("List of argument names and their type.\n\nNote that not all names will be valid identifiers, as some of\nthem may be patterns.") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "FnInput" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: FnInput as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("output") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (654usize , 4usize) , end : (654usize , 28usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Option" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "core" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["core" , "option" , "Option"] , kind : erised :: types :: ItemKind :: Enum }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Type" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Type as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("c_variadic") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (655usize , 4usize) , end : (655usize , 24usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: Primitive ("bool") }] , fields_stripped : false } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticFnDecl {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticFnDecl",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticFnDecl"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (647usize, 23usize),
                    end: (647usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("inputs"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (647usize, 23usize),
                                end: (647usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticFnInput",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        <::erised::heap_types::StaticFnInput as Reflect>::TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                    erised::types::StructField {
                        name: Some("output"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (647usize, 23usize),
                                end: (647usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "StaticType",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("c_variadic"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (655usize, 4usize),
                                end: (655usize, 24usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::FnInput {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "FnInput",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "FnInput"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (659usize, 0usize),
                    end: (662usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("pat"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (660usize, 4usize),
                                end: (660usize, 19usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("ty"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (661usize, 4usize),
                                end: (661usize, 16usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Type",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Type as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticFnInput {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticFnInput",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticFnInput"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (658usize, 23usize),
                    end: (658usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("pat"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (658usize, 23usize),
                                end: (658usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("ty"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (661usize, 4usize),
                                end: (661usize, 16usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticType",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Trait {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "Trait",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Trait"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (665usize, 0usize),
                    end: (674usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (666usize, 4usize),
                                end: (666usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (667usize, 4usize),
                                end: (667usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "ItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::ItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("is_auto"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (668usize, 4usize),
                                end: (668usize, 21usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("is_unsafe"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (669usize, 4usize),
                                end: (669usize, 23usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("items"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (670usize, 4usize),
                                end: (670usize, 32usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "Identifiable",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: Identifiable as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (671usize, 4usize),
                                end: (671usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Generics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Generics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("bounds"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (672usize, 4usize),
                                end: (672usize, 33usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "GenericBound",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: GenericBound as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("implementations"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (673usize, 4usize),
                                end: (673usize, 42usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "Identifiable",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: Identifiable as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticTrait {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticTrait",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticTrait"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (664usize, 23usize),
                    end: (664usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (664usize, 23usize),
                                end: (664usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (667usize, 4usize),
                                end: (667usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("is_auto"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (668usize, 4usize),
                                end: (668usize, 21usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("is_unsafe"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (669usize, 4usize),
                                end: (669usize, 23usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("items"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (664usize, 23usize),
                                end: (664usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticIdentifiable",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticIdentifiable as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (671usize, 4usize),
                                end: (671usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticGenerics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticGenerics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("bounds"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (664usize, 23usize),
                                end: (664usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticGenericBound",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticGenericBound as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                    erised::types::StructField {
                        name: Some("implementations"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (664usize, 23usize),
                                end: (664usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticIdentifiable",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticIdentifiable as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::TraitAlias {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "TraitAlias",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "TraitAlias"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (677usize, 0usize),
                    end: (680usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (678usize, 4usize),
                                end: (678usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Generics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Generics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("params"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (679usize, 4usize),
                                end: (679usize, 33usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "GenericBound",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: GenericBound as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticTraitAlias {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticTraitAlias",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticTraitAlias"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (676usize, 23usize),
                    end: (676usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (678usize, 4usize),
                                end: (678usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticGenerics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticGenerics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("params"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (676usize, 23usize),
                                end: (676usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticGenericBound",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticGenericBound as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Impl {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "Impl",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Impl"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (683usize, 0usize),
                    end: (694usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (684usize, 4usize),
                                end: (684usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "ItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::ItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("is_unsafe"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (685usize, 4usize),
                                end: (685usize, 23usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (686usize, 4usize),
                                end: (686usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Generics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Generics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("provided_trait_methods"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (687usize, 4usize),
                                end: (687usize, 43usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "String",
                                        prefix: "",
                                        target: erised::types::Identifiable::Summary(|| {
                                            erised::types::ItemSummary {
                                                krate: || erised::types::ExternalCrate {
                                                    name: "alloc",
                                                    html_root_url: Some(
                                                        "https://doc.rust-lang.org/nightly/",
                                                    ),
                                                },
                                                path: &["alloc", "string", "String"],
                                                kind: erised::types::ItemKind::Struct,
                                            }
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("trait_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (688usize, 4usize),
                                end: (688usize, 28usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "Path",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            <::erised::heap_types::Path as Reflect>::TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("for_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (689usize, 4usize),
                                end: (689usize, 18usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Type",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Type as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("items"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (690usize, 4usize),
                                end: (690usize, 30usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "Weak",
                                        prefix: "",
                                        target: erised::types::Identifiable::Summary(|| {
                                            erised::types::ItemSummary {
                                                krate: || erised::types::ExternalCrate {
                                                    name: "alloc",
                                                    html_root_url: Some(
                                                        "https://doc.rust-lang.org/nightly/",
                                                    ),
                                                },
                                                path: &["alloc", "sync", "Weak"],
                                                kind: erised::types::ItemKind::Struct,
                                            }
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[erised::types::GenericArg::Type(
                                                erised::types::Type::ResolvedPath(
                                                    erised::types::Path {
                                                        name: "Item",
                                                        prefix: "",
                                                        target: erised::types::Identifiable::Item(
                                                            || {
                                                                < :: erised :: heap_types :: Item as Reflect > :: TYPE_INFO
                                                            },
                                                        ),
                                                        args: Some(|| {
                                                            erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }
                                                        }),
                                                    },
                                                ),
                                            )],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("negative"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (691usize, 4usize),
                                end: (691usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("synthetic"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (692usize, 4usize),
                                end: (692usize, 23usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("blanket_impl"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (693usize, 4usize),
                                end: (693usize, 34usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "Type",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            <::erised::heap_types::Type as Reflect>::TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticImpl {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticImpl",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticImpl"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (682usize, 23usize),
                    end: (682usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (684usize, 4usize),
                                end: (684usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("is_unsafe"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (685usize, 4usize),
                                end: (685usize, 23usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (686usize, 4usize),
                                end: (686usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticGenerics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticGenerics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("provided_trait_methods"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (682usize, 23usize),
                                end: (682usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::BorrowedRef {
                                lifetime: Some("'static"),
                                mutable: false,
                                type_: erised::types::Type::Primitive("str"),
                            }),
                        },
                    },
                    erised::types::StructField {
                        name: Some("trait_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (682usize, 23usize),
                                end: (682usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "StaticPath",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            <::erised::heap_types::StaticPath as Reflect>::TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("for_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (689usize, 4usize),
                                end: (689usize, 18usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticType",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("items"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (682usize, 23usize),
                                end: (682usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(
                                erised::types::Type::FunctionPointer(
                                    erised::types::FunctionPointer {
                                        decl: erised::types::FnDecl {
                                            inputs: &[],
                                            output: Some(erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "StaticItem",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: StaticItem as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            )),
                                            c_variadic: false,
                                        },
                                        generic_params: &[],
                                        header: erised::types::Header {
                                            const_: false,
                                            unsafe_: false,
                                            async_: false,
                                            abi: erised::types::Abi::Rust,
                                        },
                                    },
                                ),
                            ),
                        },
                    },
                    erised::types::StructField {
                        name: Some("negative"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (691usize, 4usize),
                                end: (691usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("synthetic"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (692usize, 4usize),
                                end: (692usize, 23usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("blanket_impl"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (682usize, 23usize),
                                end: (682usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "StaticType",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Import {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Struct (erised :: types :: Struct { name : "Import" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Import"] , kind : erised :: types :: ItemKind :: Struct }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (697usize , 0usize) , end : (711usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: StructKind :: Plain { fields : & [erised :: types :: StructField { name : Some ("meta") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (698usize , 4usize) , end : (698usize , 22usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "ItemMeta" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: ItemMeta as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("source") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (700usize , 4usize) , end : (700usize , 22usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("The full path being imported.") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("name") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (703usize , 4usize) , end : (703usize , 20usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("May be different from the last segment of `source` when renaming imports:\n`use source as name;`") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("target") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (708usize , 4usize) , end : (708usize , 36usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("The ID of the item being imported. Will be `None` in case of re-exports of primitives:\n```rust\npub use i32 as my_i32;\n```") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Option" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "core" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["core" , "option" , "Option"] , kind : erised :: types :: ItemKind :: Enum }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Identifiable" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Identifiable as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("glob") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (710usize , 4usize) , end : (710usize , 18usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("Whether this import uses a glob: `use source::*;`") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: Primitive ("bool") }] , fields_stripped : false } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticImport {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticImport",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticImport"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (696usize, 23usize),
                    end: (696usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (698usize, 4usize),
                                end: (698usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("source"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (696usize, 23usize),
                                end: (696usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (696usize, 23usize),
                                end: (696usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("target"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (696usize, 23usize),
                                end: (696usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "StaticIdentifiable",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: StaticIdentifiable as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("glob"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (710usize, 4usize),
                                end: (710usize, 18usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::ProcMacro {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "ProcMacro",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "ProcMacro"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (714usize, 0usize),
                    end: (717usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("kind"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (715usize, 4usize),
                                end: (715usize, 23usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "MacroKind",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::MacroKind as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("helpers"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (716usize, 4usize),
                                end: (716usize, 28usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "String",
                                        prefix: "",
                                        target: erised::types::Identifiable::Summary(|| {
                                            erised::types::ItemSummary {
                                                krate: || erised::types::ExternalCrate {
                                                    name: "alloc",
                                                    html_root_url: Some(
                                                        "https://doc.rust-lang.org/nightly/",
                                                    ),
                                                },
                                                path: &["alloc", "string", "String"],
                                                kind: erised::types::ItemKind::Struct,
                                            }
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticProcMacro {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticProcMacro",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticProcMacro"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (713usize, 23usize),
                    end: (713usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("kind"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (715usize, 4usize),
                                end: (715usize, 23usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticMacroKind",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticMacroKind as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("helpers"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (713usize, 23usize),
                                end: (713usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::BorrowedRef {
                                lifetime: Some("'static"),
                                mutable: false,
                                type_: erised::types::Type::Primitive("str"),
                            }),
                        },
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::MacroKind {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "MacroKind",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "MacroKind"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (720usize, 0usize),
                    end: (727usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Bang",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "MacroKind", "Bang"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (722usize, 4usize),
                            end: (722usize, 8usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: Some("A bang macro `foo!()`."),
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Attr",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "MacroKind", "Attr"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (724usize, 4usize),
                            end: (724usize, 8usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: Some("An attribute macro `#[foo]`."),
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Derive",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "MacroKind", "Derive"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (726usize, 4usize),
                            end: (726usize, 10usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: Some("#[derive(Debug)]"),
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticMacroKind {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticMacroKind",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticMacroKind"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (719usize, 23usize),
                    end: (719usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Bang",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticMacroKind", "Bang"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (722usize, 4usize),
                            end: (722usize, 8usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Attr",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticMacroKind", "Attr"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (724usize, 4usize),
                            end: (724usize, 8usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Derive",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticMacroKind", "Derive"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (726usize, 4usize),
                            end: (726usize, 10usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Typedef {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "Typedef",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Typedef"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (730usize, 0usize),
                    end: (735usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (731usize, 4usize),
                                end: (731usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (732usize, 4usize),
                                end: (732usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "ItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::ItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("type_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (733usize, 4usize),
                                end: (733usize, 19usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Type",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Type as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (734usize, 4usize),
                                end: (734usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Generics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Generics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticTypedef {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticTypedef",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticTypedef"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (729usize, 23usize),
                    end: (729usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (729usize, 23usize),
                                end: (729usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (732usize, 4usize),
                                end: (732usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("type_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (733usize, 4usize),
                                end: (733usize, 19usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticType",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (734usize, 4usize),
                                end: (734usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticGenerics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticGenerics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::OpaqueTy {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "OpaqueTy",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "OpaqueTy"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (738usize, 0usize),
                    end: (741usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("bounds"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (739usize, 4usize),
                                end: (739usize, 33usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "GenericBound",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: GenericBound as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (740usize, 4usize),
                                end: (740usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Generics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Generics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticOpaqueTy {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticOpaqueTy",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticOpaqueTy"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (737usize, 23usize),
                    end: (737usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("bounds"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (737usize, 23usize),
                                end: (737usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticGenericBound",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticGenericBound as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                    erised::types::StructField {
                        name: Some("generics"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (740usize, 4usize),
                                end: (740usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticGenerics",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticGenerics as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Static {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "Static",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Static"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (744usize, 0usize),
                    end: (748usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("type_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (745usize, 4usize),
                                end: (745usize, 19usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Type",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Type as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("mutable"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (746usize, 4usize),
                                end: (746usize, 21usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("expr"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (747usize, 4usize),
                                end: (747usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticStatic {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticStatic",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticStatic"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (743usize, 23usize),
                    end: (743usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("type_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (745usize, 4usize),
                                end: (745usize, 19usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticType",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("mutable"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (746usize, 4usize),
                                end: (746usize, 21usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                    erised::types::StructField {
                        name: Some("expr"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (743usize, 23usize),
                                end: (743usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Primitive {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "Primitive",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Primitive"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (751usize, 0usize),
                    end: (754usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (752usize, 4usize),
                                end: (752usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("impls"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (753usize, 4usize),
                                end: (753usize, 32usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "Identifiable",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: Identifiable as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticPrimitive {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticPrimitive",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticPrimitive"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (750usize, 23usize),
                    end: (750usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (750usize, 23usize),
                                end: (750usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("impls"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (750usize, 23usize),
                                end: (750usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticIdentifiable",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticIdentifiable as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::builder::Error {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Enum (erised :: types :: Enum { name : "Error" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "builder" , "Error"] , kind : erised :: types :: ItemKind :: Enum }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/builder.rs" , begin : (12usize , 0usize) , end : (30usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , variants_stripped : false , variants : & [erised :: types :: Variant { name : "VersionMismatch" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "builder" , "Error" , "VersionMismatch"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/builder.rs" , begin : (14usize , 4usize) , end : (14usize , 49usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & ["#[error(\"Expected JSON doc in version {expected} but found {found}\")]"] , deprecation : None } , kind : erised :: types :: VariantKind :: Struct { fields : & [erised :: types :: StructField { name : Some ("expected") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/builder.rs" , begin : (14usize , 22usize) , end : (14usize , 35usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: Primitive ("u32") } , erised :: types :: StructField { name : Some ("found") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/builder.rs" , begin : (14usize , 37usize) , end : (14usize , 47usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: Primitive ("u32") }] , fields_stripped : false } , discriminant : None } , erised :: types :: Variant { name : "BuildError" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "builder" , "Error" , "BuildError"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/builder.rs" , begin : (17usize , 4usize) , end : (17usize , 48usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & ["#[error(transparent)]"] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/builder.rs" , begin : (17usize , 23usize) , end : (17usize , 47usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & ["#[from]"] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "BuildError" , prefix : "rustdoc_json" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "rustdoc_json" , html_root_url : None } , path : & ["rustdoc_json" , "BuildError"] , kind : erised :: types :: ItemKind :: Enum }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) })]) , discriminant : None } , erised :: types :: Variant { name : "IO" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "builder" , "Error" , "IO"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/builder.rs" , begin : (20usize , 4usize) , end : (20usize , 30usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & ["#[error(transparent)]"] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/builder.rs" , begin : (20usize , 15usize) , end : (20usize , 29usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & ["#[from]"] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Error" , prefix : "std::io" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "std" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["std" , "io" , "error" , "Error"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) })]) , discriminant : None } , erised :: types :: Variant { name : "JSON" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "builder" , "Error" , "JSON"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/builder.rs" , begin : (23usize , 4usize) , end : (23usize , 35usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & ["#[error(transparent)]"] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/builder.rs" , begin : (23usize , 17usize) , end : (23usize , 34usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & ["#[from]"] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Error" , prefix : "serde_json" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "serde_json" , html_root_url : Some ("https://docs.rs/serde_json/1.0.96/") } , path : & ["serde_json" , "error" , "Error"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) })]) , discriminant : None } , erised :: types :: Variant { name : "CouldNotFind" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "builder" , "Error" , "CouldNotFind"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/builder.rs" , begin : (26usize , 4usize) , end : (26usize , 35usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & ["#[error(\"Could not find item with id: {0:?}\")]"] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/builder.rs" , begin : (26usize , 17usize) , end : (26usize , 34usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Id" , prefix : "rustdoc_types" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "rustdoc_types" , html_root_url : None } , path : & ["rustdoc_types" , "Id"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) })]) , discriminant : None } , erised :: types :: Variant { name : "CouldNotFindCrate" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "builder" , "Error" , "CouldNotFindCrate"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/builder.rs" , begin : (29usize , 4usize) , end : (29usize , 26usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & ["#[error(\"Could not find crate with id: {0:?}\")]"] , deprecation : None } , kind : erised :: types :: VariantKind :: Tuple (& [Some (erised :: types :: StructField { name : Some ("0") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/builder.rs" , begin : (29usize , 22usize) , end : (29usize , 25usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: Primitive ("u32") })]) , discriminant : None }] , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::builder::CrateReplacement {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "CrateReplacement",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "builder", "CrateReplacement"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/builder.rs",
                    begin: (42usize, 0usize),
                    end: (45usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Root",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "builder", "CrateReplacement", "Root"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/builder.rs",
                            begin: (43usize, 4usize),
                            end: (43usize, 8usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "OtherByName",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "builder", "CrateReplacement", "OtherByName"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/builder.rs",
                            begin: (44usize, 4usize),
                            end: (44usize, 23usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/builder.rs",
                                begin: (44usize, 16usize),
                                end: (44usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::builder::PackageTarget {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "PackageTarget",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "builder", "PackageTarget"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/builder.rs",
                    begin: (78usize, 0usize),
                    end: (85usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Lib",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "builder", "PackageTarget", "Lib"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/builder.rs",
                            begin: (80usize, 4usize),
                            end: (80usize, 7usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &["#[default]"],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Bin",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "builder", "PackageTarget", "Bin"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/builder.rs",
                            begin: (81usize, 4usize),
                            end: (81usize, 15usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/builder.rs",
                                begin: (81usize, 8usize),
                                end: (81usize, 14usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Example",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "builder", "PackageTarget", "Example"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/builder.rs",
                            begin: (82usize, 4usize),
                            end: (82usize, 19usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/builder.rs",
                                begin: (82usize, 12usize),
                                end: (82usize, 18usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Test",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "builder", "PackageTarget", "Test"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/builder.rs",
                            begin: (83usize, 4usize),
                            end: (83usize, 16usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/builder.rs",
                                begin: (83usize, 9usize),
                                end: (83usize, 15usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Bench",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "builder", "PackageTarget", "Bench"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/builder.rs",
                            begin: (84usize, 4usize),
                            end: (84usize, 17usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/builder.rs",
                                begin: (84usize, 10usize),
                                end: (84usize, 16usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::builder::BuilderOpts {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "BuilderOpts",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "builder", "BuilderOpts"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/builder.rs",
                    begin: (61usize, 0usize),
                    end: (75usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[],
                fields_stripped: true,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticCrate {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticCrate",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticCrate"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (13usize, 23usize),
                    end: (13usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("root"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (16usize, 4usize),
                                end: (16usize, 24usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::FunctionPointer(erised::types::FunctionPointer {
                            decl: erised::types::FnDecl {
                                inputs: &[],
                                output: Some(erised::types::Type::ResolvedPath(
                                    erised::types::Path {
                                        name: "StaticModule",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: StaticModule as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    },
                                )),
                                c_variadic: false,
                            },
                            generic_params: &[],
                            header: erised::types::Header {
                                const_: false,
                                unsafe_: false,
                                async_: false,
                                abi: erised::types::Abi::Rust,
                            },
                        }),
                    },
                    erised::types::StructField {
                        name: Some("crate_version"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (13usize, 23usize),
                                end: (13usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::BorrowedRef {
                                        lifetime: Some("'static"),
                                        mutable: false,
                                        type_: erised::types::Type::Primitive("str"),
                                    },
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("all_items"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (13usize, 23usize),
                                end: (13usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(
                                erised::types::Type::FunctionPointer(
                                    erised::types::FunctionPointer {
                                        decl: erised::types::FnDecl {
                                            inputs: &[],
                                            output: Some(erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "StaticItem",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: StaticItem as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            )),
                                            c_variadic: false,
                                        },
                                        generic_params: &[],
                                        header: erised::types::Header {
                                            const_: false,
                                            unsafe_: false,
                                            async_: false,
                                            abi: erised::types::Abi::Rust,
                                        },
                                    },
                                ),
                            ),
                        },
                    },
                    erised::types::StructField {
                        name: Some("summaries"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (13usize, 23usize),
                                end: (13usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(
                                erised::types::Type::FunctionPointer(
                                    erised::types::FunctionPointer {
                                        decl: erised::types::FnDecl {
                                            inputs: &[],
                                            output: Some(erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "StaticItemSummary",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: StaticItemSummary as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            )),
                                            c_variadic: false,
                                        },
                                        generic_params: &[],
                                        header: erised::types::Header {
                                            const_: false,
                                            unsafe_: false,
                                            async_: false,
                                            abi: erised::types::Abi::Rust,
                                        },
                                    },
                                ),
                            ),
                        },
                    },
                    erised::types::StructField {
                        name: Some("external_crates"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (13usize, 23usize),
                                end: (13usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(
                                erised::types::Type::FunctionPointer(
                                    erised::types::FunctionPointer {
                                        decl: erised::types::FnDecl {
                                            inputs: &[],
                                            output: Some(erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "StaticExternalCrate",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: StaticExternalCrate as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            )),
                                            c_variadic: false,
                                        },
                                        generic_params: &[],
                                        header: erised::types::Header {
                                            const_: false,
                                            unsafe_: false,
                                            async_: false,
                                            abi: erised::types::Abi::Rust,
                                        },
                                    },
                                ),
                            ),
                        },
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Identifiable {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "Identifiable",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Identifiable"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (29usize, 0usize),
                    end: (32usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Item",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Identifiable", "Item"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (30usize, 4usize),
                            end: (30usize, 20usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (30usize, 9usize),
                                end: (30usize, 19usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Weak",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "sync", "Weak"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "Item",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            <::erised::heap_types::Item as Reflect>::TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Summary",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "Identifiable", "Summary"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (31usize, 4usize),
                            end: (31usize, 29usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (31usize, 12usize),
                                end: (31usize, 28usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Arc",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "sync", "Arc"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "ItemSummary",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: ItemSummary as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticIdentifiable {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticIdentifiable",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticIdentifiable"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (28usize, 23usize),
                    end: (28usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Item",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticIdentifiable", "Item"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (28usize, 23usize),
                            end: (28usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (28usize, 23usize),
                                end: (28usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::FunctionPointer(erised::types::FunctionPointer {
                            decl: erised::types::FnDecl {
                                inputs: &[],
                                output: Some(erised::types::Type::ResolvedPath(
                                    erised::types::Path {
                                        name: "StaticItem",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            <::erised::heap_types::StaticItem as Reflect>::TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    },
                                )),
                                c_variadic: false,
                            },
                            generic_params: &[],
                            header: erised::types::Header {
                                const_: false,
                                unsafe_: false,
                                async_: false,
                                abi: erised::types::Abi::Rust,
                            },
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Summary",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticIdentifiable", "Summary"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (28usize, 23usize),
                            end: (28usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (28usize, 23usize),
                                end: (28usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::FunctionPointer(erised::types::FunctionPointer {
                            decl: erised::types::FnDecl {
                                inputs: &[],
                                output: Some(erised::types::Type::ResolvedPath(
                                    erised::types::Path {
                                        name: "StaticItemSummary",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: StaticItemSummary as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    },
                                )),
                                c_variadic: false,
                            },
                            generic_params: &[],
                            header: erised::types::Header {
                                const_: false,
                                unsafe_: false,
                                async_: false,
                                abi: erised::types::Abi::Rust,
                            },
                        }),
                    })]),
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::ExternalCrate {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "ExternalCrate",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "ExternalCrate"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (35usize, 0usize),
                    end: (38usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (36usize, 4usize),
                                end: (36usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("html_root_url"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (37usize, 4usize),
                                end: (37usize, 37usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "String",
                                        prefix: "",
                                        target: erised::types::Identifiable::Summary(|| {
                                            erised::types::ItemSummary {
                                                krate: || erised::types::ExternalCrate {
                                                    name: "alloc",
                                                    html_root_url: Some(
                                                        "https://doc.rust-lang.org/nightly/",
                                                    ),
                                                },
                                                path: &["alloc", "string", "String"],
                                                kind: erised::types::ItemKind::Struct,
                                            }
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticExternalCrate {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticExternalCrate",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticExternalCrate"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (34usize, 23usize),
                    end: (34usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (34usize, 23usize),
                                end: (34usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("html_root_url"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (34usize, 23usize),
                                end: (34usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::BorrowedRef {
                                        lifetime: Some("'static"),
                                        mutable: false,
                                        type_: erised::types::Type::Primitive("str"),
                                    },
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::ItemSummary {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Struct (erised :: types :: Struct { name : "ItemSummary" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "ItemSummary"] , kind : erised :: types :: ItemKind :: Struct }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (45usize , 0usize) , end : (59usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("For external (not defined in the local crate) items, you don't get the same level of\ninformation. This struct should contain enough to generate a link/reference to the item in\nquestion, or can be used by a tool that takes the json output of multiple crates to find\nthe actual item definition with all the relevant info.") , attrs : & [] , deprecation : None } , kind : erised :: types :: StructKind :: Plain { fields : & [erised :: types :: StructField { name : Some ("krate") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (48usize , 4usize) , end : (48usize , 33usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("Can be used to look up the name and html_root_url of the crate this item came from in the\n`external_crates` map.") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Arc" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "sync" , "Arc"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "ExternalCrate" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: ExternalCrate as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("path") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (56usize , 4usize) , end : (56usize , 25usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("The list of path components for the fully qualified path of this item (e.g.\n`[\"std\", \"io\", \"lazy\", \"Lazy\"]` for `std::io::lazy::Lazy`).\n\nNote that items can appear in multiple paths, and the one chosen is implementation\ndefined. Currently, this is the full path to where the item was defined. Eg\n[`String`] is currently `[\"alloc\", \"string\", \"String\"]` and [`std::collections::HashMap`] is\n`[\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"]`, but this is subject to change.") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("kind") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (58usize , 4usize) , end : (58usize , 22usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("Whether this item is a struct, trait, macro, etc.") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "ItemKind" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: ItemKind as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) }] , fields_stripped : false } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticItemSummary {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticItemSummary",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticItemSummary"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (44usize, 23usize),
                    end: (44usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("krate"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (48usize, 4usize),
                                end: (48usize, 32usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::FunctionPointer(erised::types::FunctionPointer {
                            decl: erised::types::FnDecl {
                                inputs: &[],
                                output: Some(erised::types::Type::ResolvedPath(
                                    erised::types::Path {
                                        name: "StaticExternalCrate",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: StaticExternalCrate as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    },
                                )),
                                c_variadic: false,
                            },
                            generic_params: &[],
                            header: erised::types::Header {
                                const_: false,
                                unsafe_: false,
                                async_: false,
                                abi: erised::types::Abi::Rust,
                            },
                        }),
                    },
                    erised::types::StructField {
                        name: Some("path"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (44usize, 23usize),
                                end: (44usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::BorrowedRef {
                                lifetime: Some("'static"),
                                mutable: false,
                                type_: erised::types::Type::Primitive("str"),
                            }),
                        },
                    },
                    erised::types::StructField {
                        name: Some("kind"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (58usize, 4usize),
                                end: (58usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticItemKind",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticItemKind as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::ItemMeta {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Struct (erised :: types :: Struct { name : "ItemMeta" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "ItemMeta"] , kind : erised :: types :: ItemKind :: Struct }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (62usize , 0usize) , end : (79usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: StructKind :: Plain { fields : & [erised :: types :: StructField { name : Some ("krate") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (65usize , 4usize) , end : (65usize , 33usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("This can be used as a key to the `external_crates` map of [`Crate`] to see which crate\nthis item came from.") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Arc" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "sync" , "Arc"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "ExternalCrate" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: ExternalCrate as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("summary") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (66usize , 4usize) , end : (66usize , 36usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Option" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "core" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["core" , "option" , "Option"] , kind : erised :: types :: ItemKind :: Enum }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "ItemSummary" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: ItemSummary as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("span") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (69usize , 4usize) , end : (69usize , 26usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("The source location of this item (absent if it came from a macro expansion or inline\nassembly).") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Option" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "core" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["core" , "option" , "Option"] , kind : erised :: types :: ItemKind :: Enum }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Span" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Span as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("visibility") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (72usize , 4usize) , end : (72usize , 30usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("By default all documented items are public, but you can tell rustdoc to output private items\nso this field is needed to differentiate.") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Visibility" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Visibility as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("docs") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (75usize , 4usize) , end : (75usize , 28usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("The full markdown docstring of this item. Absent if there is no documentation at all,\nSome(\"\") if there is some documentation but it is empty (EG `#[doc = \"\"]`).") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Option" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "core" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["core" , "option" , "Option"] , kind : erised :: types :: ItemKind :: Enum }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("attrs") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (77usize , 4usize) , end : (77usize , 26usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("Stringified versions of the attributes on this item (e.g. `\"#[inline]\"`)") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("deprecation") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (78usize , 4usize) , end : (78usize , 40usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Option" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "core" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["core" , "option" , "Option"] , kind : erised :: types :: ItemKind :: Enum }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Deprecation" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Deprecation as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) }] , fields_stripped : false } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticItemMeta {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticItemMeta",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticItemMeta"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (61usize, 23usize),
                    end: (61usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("krate"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (65usize, 4usize),
                                end: (65usize, 32usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::FunctionPointer(erised::types::FunctionPointer {
                            decl: erised::types::FnDecl {
                                inputs: &[],
                                output: Some(erised::types::Type::ResolvedPath(
                                    erised::types::Path {
                                        name: "StaticExternalCrate",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: StaticExternalCrate as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    },
                                )),
                                c_variadic: false,
                            },
                            generic_params: &[],
                            header: erised::types::Header {
                                const_: false,
                                unsafe_: false,
                                async_: false,
                                abi: erised::types::Abi::Rust,
                            },
                        }),
                    },
                    erised::types::StructField {
                        name: Some("summary"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (61usize, 23usize),
                                end: (61usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "StaticItemSummary",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: StaticItemSummary as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("span"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (61usize, 23usize),
                                end: (61usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "StaticSpan",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            <::erised::heap_types::StaticSpan as Reflect>::TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("visibility"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (72usize, 4usize),
                                end: (72usize, 30usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticVisibility",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticVisibility as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("docs"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (61usize, 23usize),
                                end: (61usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::BorrowedRef {
                                        lifetime: Some("'static"),
                                        mutable: false,
                                        type_: erised::types::Type::Primitive("str"),
                                    },
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("attrs"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (61usize, 23usize),
                                end: (61usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::BorrowedRef {
                                lifetime: Some("'static"),
                                mutable: false,
                                type_: erised::types::Type::Primitive("str"),
                            }),
                        },
                    },
                    erised::types::StructField {
                        name: Some("deprecation"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (61usize, 23usize),
                                end: (61usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "StaticDeprecation",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: StaticDeprecation as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Span {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Struct (erised :: types :: Struct { name : "Span" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Span"] , kind : erised :: types :: ItemKind :: Struct }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (104usize , 0usize) , end : (111usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: StructKind :: Plain { fields : & [erised :: types :: StructField { name : Some ("filename") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (106usize , 4usize) , end : (106usize , 25usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("The path to the source file for this span relative to the path `rustdoc` was invoked with.") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "PathBuf" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "std" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["std" , "path" , "PathBuf"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("begin") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (108usize , 4usize) , end : (108usize , 29usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("Zero indexed Line and Column of the first character of the `Span`") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: Tuple (& [erised :: types :: Type :: Primitive ("usize") , erised :: types :: Type :: Primitive ("usize")]) } , erised :: types :: StructField { name : Some ("end") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (110usize , 4usize) , end : (110usize , 27usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("Zero indexed Line and Column of the last character of the `Span`") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: Tuple (& [erised :: types :: Type :: Primitive ("usize") , erised :: types :: Type :: Primitive ("usize")]) }] , fields_stripped : false } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticSpan {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticSpan",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticSpan"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (103usize, 23usize),
                    end: (103usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("filename"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (103usize, 23usize),
                                end: (103usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("begin"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (103usize, 23usize),
                                end: (103usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Tuple(&[
                            erised::types::Type::Primitive("usize"),
                            erised::types::Type::Primitive("usize"),
                        ]),
                    },
                    erised::types::StructField {
                        name: Some("end"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (103usize, 23usize),
                                end: (103usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Tuple(&[
                            erised::types::Type::Primitive("usize"),
                            erised::types::Type::Primitive("usize"),
                        ]),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Deprecation {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "Deprecation",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Deprecation"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (114usize, 0usize),
                    end: (117usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("since"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (115usize, 4usize),
                                end: (115usize, 29usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "String",
                                        prefix: "",
                                        target: erised::types::Identifiable::Summary(|| {
                                            erised::types::ItemSummary {
                                                krate: || erised::types::ExternalCrate {
                                                    name: "alloc",
                                                    html_root_url: Some(
                                                        "https://doc.rust-lang.org/nightly/",
                                                    ),
                                                },
                                                path: &["alloc", "string", "String"],
                                                kind: erised::types::ItemKind::Struct,
                                            }
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("note"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (116usize, 4usize),
                                end: (116usize, 28usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "String",
                                        prefix: "",
                                        target: erised::types::Identifiable::Summary(|| {
                                            erised::types::ItemSummary {
                                                krate: || erised::types::ExternalCrate {
                                                    name: "alloc",
                                                    html_root_url: Some(
                                                        "https://doc.rust-lang.org/nightly/",
                                                    ),
                                                },
                                                path: &["alloc", "string", "String"],
                                                kind: erised::types::ItemKind::Struct,
                                            }
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticDeprecation {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticDeprecation",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticDeprecation"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (113usize, 23usize),
                    end: (113usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("since"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (113usize, 23usize),
                                end: (113usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::BorrowedRef {
                                        lifetime: Some("'static"),
                                        mutable: false,
                                        type_: erised::types::Type::Primitive("str"),
                                    },
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("note"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (113usize, 23usize),
                                end: (113usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::BorrowedRef {
                                        lifetime: Some("'static"),
                                        mutable: false,
                                        type_: erised::types::Type::Primitive("str"),
                                    },
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Visibility {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Enum (erised :: types :: Enum { name : "Visibility" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Visibility"] , kind : erised :: types :: ItemKind :: Enum }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (120usize , 0usize) , end : (132usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , variants_stripped : false , variants : & [erised :: types :: Variant { name : "Public" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Visibility" , "Public"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (121usize , 4usize) , end : (121usize , 10usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Plain , discriminant : None } , erised :: types :: Variant { name : "Default" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Visibility" , "Default"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (124usize , 4usize) , end : (124usize , 11usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("For the most part items are private by default. The exceptions are associated items of\npublic traits and variants of public enums.") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Plain , discriminant : None } , erised :: types :: Variant { name : "Crate" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Visibility" , "Crate"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (125usize , 4usize) , end : (125usize , 9usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Plain , discriminant : None } , erised :: types :: Variant { name : "Restricted" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "Visibility" , "Restricted"] , kind : erised :: types :: ItemKind :: Variant }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (128usize , 4usize) , end : (131usize , 5usize) }) , visibility : erised :: types :: Visibility :: Default , docs : Some ("For `pub(in path)` visibility. `parent` is the module it's restricted to and `path` is how\nthat module was referenced (like `\"super::super\"` or `\"crate::foo::bar\"`).") , attrs : & [] , deprecation : None } , kind : erised :: types :: VariantKind :: Struct { fields : & [erised :: types :: StructField { name : Some ("parent") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (129usize , 8usize) , end : (129usize , 28usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Identifiable" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Identifiable as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("path") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (130usize , 8usize) , end : (130usize , 20usize) }) , visibility : erised :: types :: Visibility :: Default , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) }] , fields_stripped : false } , discriminant : None }] , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticVisibility {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticVisibility",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticVisibility"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (119usize, 23usize),
                    end: (119usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Public",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticVisibility", "Public"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (121usize, 4usize),
                            end: (121usize, 10usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Default",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticVisibility", "Default"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (124usize, 4usize),
                            end: (124usize, 11usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Crate",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticVisibility", "Crate"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (125usize, 4usize),
                            end: (125usize, 9usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Restricted",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticVisibility", "Restricted"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (119usize, 23usize),
                            end: (119usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("parent"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (129usize, 8usize),
                                        end: (129usize, 28usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "StaticIdentifiable",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticIdentifiable as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("path"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (119usize, 23usize),
                                        end: (119usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Primitive("str"),
                                },
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::DynTrait {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Struct (erised :: types :: Struct { name : "DynTrait" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "DynTrait"] , kind : erised :: types :: ItemKind :: Struct }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (135usize , 0usize) , end : (146usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , kind : erised :: types :: StructKind :: Plain { fields : & [erised :: types :: StructField { name : Some ("traits") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (137usize , 4usize) , end : (137usize , 30usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("All the traits implemented. One of them is the vtable, and the rest must be auto traits.") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "PolyTrait" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: PolyTrait as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("lifetime") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (145usize , 4usize) , end : (145usize , 32usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("The lifetime of the whole dyn object\n```text\ndyn Debug + 'static\n            ^^^^^^^\n            |\n            this part\n```") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Option" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "core" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["core" , "option" , "Option"] , kind : erised :: types :: ItemKind :: Enum }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "String" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "string" , "String"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) }] , fields_stripped : false } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticDynTrait {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticDynTrait",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticDynTrait"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (134usize, 23usize),
                    end: (134usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("traits"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (134usize, 23usize),
                                end: (134usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticPolyTrait",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticPolyTrait as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                    erised::types::StructField {
                        name: Some("lifetime"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (134usize, 23usize),
                                end: (134usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::BorrowedRef {
                                        lifetime: Some("'static"),
                                        mutable: false,
                                        type_: erised::types::Type::Primitive("str"),
                                    },
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::PolyTrait {
        const TYPE_INFO : erised :: types :: Item = erised :: types :: Item :: Struct (erised :: types :: Struct { name : "PolyTrait" , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : Some (erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , path : & ["erised" , "heap_types" , "PolyTrait"] , kind : erised :: types :: ItemKind :: Struct }) , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (150usize , 0usize) , end : (160usize , 1usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("A trait and potential HRTBs") , attrs : & [] , deprecation : None } , kind : erised :: types :: StructKind :: Plain { fields : & [erised :: types :: StructField { name : Some ("trait_") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (151usize , 4usize) , end : (151usize , 20usize) }) , visibility : erised :: types :: Visibility :: Public , docs : None , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Path" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: Path as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }) } , erised :: types :: StructField { name : Some ("generic_params") , meta : erised :: types :: ItemMeta { krate : || erised :: types :: ExternalCrate { name : "erised" , html_root_url : None } , summary : None , span : Some (erised :: types :: Span { filename : "crates/lib/src/heap_types.rs" , begin : (159usize , 4usize) , end : (159usize , 44usize) }) , visibility : erised :: types :: Visibility :: Public , docs : Some ("Used for Higher-Rank Trait Bounds (HRTBs)\n```text\ndyn for<'a> Fn() -> &'a i32\"\n    ^^^^^^^\n      |\n      this part\n```") , attrs : & [] , deprecation : None } , ty : erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "Vec" , prefix : "" , target : erised :: types :: Identifiable :: Summary (|| erised :: types :: ItemSummary { krate : || erised :: types :: ExternalCrate { name : "alloc" , html_root_url : Some ("https://doc.rust-lang.org/nightly/") } , path : & ["alloc" , "vec" , "Vec"] , kind : erised :: types :: ItemKind :: Struct }) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [erised :: types :: GenericArg :: Type (erised :: types :: Type :: ResolvedPath (erised :: types :: Path { name : "GenericParamDef" , prefix : "" , target : erised :: types :: Identifiable :: Item (|| < :: erised :: heap_types :: GenericParamDef as Reflect > :: TYPE_INFO) , args : Some (|| erised :: types :: GenericArgs :: AngleBracketed { args : & [] , bindings : & [] }) }))] , bindings : & [] }) }) }] , fields_stripped : false } , generics : erised :: types :: Generics { params : & [] , where_predicates : & [] } , impls : & [erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ()) , erised :: types :: Identifiable :: Item (|| todo ! ())] }) ;
    }
    impl Reflect for ::erised::heap_types::StaticPolyTrait {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticPolyTrait",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticPolyTrait"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (148usize, 23usize),
                    end: (148usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("trait_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (151usize, 4usize),
                                end: (151usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticPath",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticPath as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("generic_params"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (148usize, 23usize),
                                end: (148usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticGenericParamDef",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticGenericParamDef as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::GenericArgs {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "GenericArgs",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "GenericArgs"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (163usize, 0usize),
                    end: (174usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "AngleBracketed",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "GenericArgs", "AngleBracketed"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (165usize, 4usize),
                            end: (168usize, 5usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: Some("<'a, 32, B: Copy, C = u32>"),
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("args"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (166usize, 8usize),
                                        end: (166usize, 29usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Vec",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "alloc",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["alloc", "vec", "Vec"],
                                            kind: erised::types::ItemKind::Struct,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "GenericArg",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: GenericArg as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            ),
                                        )],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("bindings"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (167usize, 8usize),
                                        end: (167usize, 34usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Vec",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "alloc",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["alloc", "vec", "Vec"],
                                            kind: erised::types::ItemKind::Struct,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "TypeBinding",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: TypeBinding as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            ),
                                        )],
                                        bindings: &[],
                                    }),
                                }),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Parenthesized",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "GenericArgs", "Parenthesized"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (170usize, 4usize),
                            end: (173usize, 5usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: Some("Fn(A, B) -> C"),
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("inputs"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (171usize, 8usize),
                                        end: (171usize, 25usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Vec",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "alloc",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["alloc", "vec", "Vec"],
                                            kind: erised::types::ItemKind::Struct,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "Type",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: Type as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            ),
                                        )],
                                        bindings: &[],
                                    }),
                                }),
                            },
                            erised::types::StructField {
                                name: Some("output"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (172usize, 8usize),
                                        end: (172usize, 28usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Option",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "core",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["core", "option", "Option"],
                                            kind: erised::types::ItemKind::Enum,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "Type",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: Type as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            ),
                                        )],
                                        bindings: &[],
                                    }),
                                }),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticGenericArgs {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticGenericArgs",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticGenericArgs"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (162usize, 23usize),
                    end: (162usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "AngleBracketed",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &[
                                "erised",
                                "heap_types",
                                "StaticGenericArgs",
                                "AngleBracketed",
                            ],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (162usize, 23usize),
                            end: (162usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("args"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (162usize, 23usize),
                                        end: (162usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Slice(
                                        erised::types::Type::ResolvedPath(erised::types::Path {
                                            name: "StaticGenericArg",
                                            prefix: "",
                                            target: erised::types::Identifiable::Item(|| {
                                                < :: erised :: heap_types :: StaticGenericArg as Reflect > :: TYPE_INFO
                                            }),
                                            args: Some(|| {
                                                erised::types::GenericArgs::AngleBracketed {
                                                    args: &[],
                                                    bindings: &[],
                                                }
                                            }),
                                        }),
                                    ),
                                },
                            },
                            erised::types::StructField {
                                name: Some("bindings"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (162usize, 23usize),
                                        end: (162usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Slice(
                                        erised::types::Type::ResolvedPath(erised::types::Path {
                                            name: "StaticTypeBinding",
                                            prefix: "",
                                            target: erised::types::Identifiable::Item(|| {
                                                < :: erised :: heap_types :: StaticTypeBinding as Reflect > :: TYPE_INFO
                                            }),
                                            args: Some(|| {
                                                erised::types::GenericArgs::AngleBracketed {
                                                    args: &[],
                                                    bindings: &[],
                                                }
                                            }),
                                        }),
                                    ),
                                },
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Parenthesized",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticGenericArgs", "Parenthesized"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (162usize, 23usize),
                            end: (162usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Struct {
                        fields: &[
                            erised::types::StructField {
                                name: Some("inputs"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (162usize, 23usize),
                                        end: (162usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::BorrowedRef {
                                    lifetime: Some("'static"),
                                    mutable: false,
                                    type_: erised::types::Type::Slice(
                                        erised::types::Type::ResolvedPath(erised::types::Path {
                                            name: "StaticType",
                                            prefix: "",
                                            target: erised::types::Identifiable::Item(|| {
                                                < :: erised :: heap_types :: StaticType as Reflect > :: TYPE_INFO
                                            }),
                                            args: Some(|| {
                                                erised::types::GenericArgs::AngleBracketed {
                                                    args: &[],
                                                    bindings: &[],
                                                }
                                            }),
                                        }),
                                    ),
                                },
                            },
                            erised::types::StructField {
                                name: Some("output"),
                                meta: erised::types::ItemMeta {
                                    krate: || erised::types::ExternalCrate {
                                        name: "erised",
                                        html_root_url: None,
                                    },
                                    summary: None,
                                    span: Some(erised::types::Span {
                                        filename: "crates/lib/src/heap_types.rs",
                                        begin: (162usize, 23usize),
                                        end: (162usize, 31usize),
                                    }),
                                    visibility: erised::types::Visibility::Default,
                                    docs: None,
                                    attrs: &[],
                                    deprecation: None,
                                },
                                ty: erised::types::Type::ResolvedPath(erised::types::Path {
                                    name: "Option",
                                    prefix: "",
                                    target: erised::types::Identifiable::Summary(|| {
                                        erised::types::ItemSummary {
                                            krate: || erised::types::ExternalCrate {
                                                name: "core",
                                                html_root_url: Some(
                                                    "https://doc.rust-lang.org/nightly/",
                                                ),
                                            },
                                            path: &["core", "option", "Option"],
                                            kind: erised::types::ItemKind::Enum,
                                        }
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[erised::types::GenericArg::Type(
                                            erised::types::Type::ResolvedPath(
                                                erised::types::Path {
                                                    name: "StaticType",
                                                    prefix: "",
                                                    target: erised::types::Identifiable::Item(
                                                        || {
                                                            < :: erised :: heap_types :: StaticType as Reflect > :: TYPE_INFO
                                                        },
                                                    ),
                                                    args: Some(|| {
                                                        erised::types::GenericArgs::AngleBracketed {
                                                            args: &[],
                                                            bindings: &[],
                                                        }
                                                    }),
                                                },
                                            ),
                                        )],
                                        bindings: &[],
                                    }),
                                }),
                            },
                        ],
                        fields_stripped: false,
                    },
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::GenericArg {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "GenericArg",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "GenericArg"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (177usize, 0usize),
                    end: (182usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Lifetime",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "GenericArg", "Lifetime"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (178usize, 4usize),
                            end: (178usize, 20usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (178usize, 13usize),
                                end: (178usize, 19usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Type",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "GenericArg", "Type"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (179usize, 4usize),
                            end: (179usize, 14usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (179usize, 9usize),
                                end: (179usize, 13usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Type",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Type as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Const",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "GenericArg", "Const"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (180usize, 4usize),
                            end: (180usize, 19usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (180usize, 10usize),
                                end: (180usize, 18usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Constant",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Constant as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Infer",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "GenericArg", "Infer"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (181usize, 4usize),
                            end: (181usize, 9usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticGenericArg {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticGenericArg",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticGenericArg"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (176usize, 23usize),
                    end: (176usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Lifetime",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticGenericArg", "Lifetime"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (176usize, 23usize),
                            end: (176usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (176usize, 23usize),
                                end: (176usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Type",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticGenericArg", "Type"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (176usize, 23usize),
                            end: (176usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (179usize, 9usize),
                                end: (179usize, 13usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticType",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Const",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticGenericArg", "Const"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (176usize, 23usize),
                            end: (176usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (180usize, 10usize),
                                end: (180usize, 18usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticConstant",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticConstant as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Infer",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticGenericArg", "Infer"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (181usize, 4usize),
                            end: (181usize, 9usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::ConstantItem {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "ConstantItem",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "ConstantItem"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (185usize, 0usize),
                    end: (189usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (186usize, 4usize),
                                end: (186usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (187usize, 4usize),
                                end: (187usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "ItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::ItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("constant"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (188usize, 4usize),
                                end: (188usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Constant",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Constant as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticConstantItem {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticConstantItem",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticConstantItem"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (184usize, 23usize),
                    end: (184usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (184usize, 23usize),
                                end: (184usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("meta"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (187usize, 4usize),
                                end: (187usize, 22usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticItemMeta",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticItemMeta as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("constant"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (188usize, 4usize),
                                end: (188usize, 26usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticConstant",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticConstant as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::Constant {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "Constant",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "Constant"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (192usize, 0usize),
                    end: (197usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("type_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (193usize, 4usize),
                                end: (193usize, 19usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Type",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Type as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("expr"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (194usize, 4usize),
                                end: (194usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("value"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (195usize, 4usize),
                                end: (195usize, 29usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "String",
                                        prefix: "",
                                        target: erised::types::Identifiable::Summary(|| {
                                            erised::types::ItemSummary {
                                                krate: || erised::types::ExternalCrate {
                                                    name: "alloc",
                                                    html_root_url: Some(
                                                        "https://doc.rust-lang.org/nightly/",
                                                    ),
                                                },
                                                path: &["alloc", "string", "String"],
                                                kind: erised::types::ItemKind::Struct,
                                            }
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("is_literal"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (196usize, 4usize),
                                end: (196usize, 24usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticConstant {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticConstant",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticConstant"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (191usize, 23usize),
                    end: (191usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("type_"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (193usize, 4usize),
                                end: (193usize, 19usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticType",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticType as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("expr"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (191usize, 23usize),
                                end: (191usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("value"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (191usize, 23usize),
                                end: (191usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Option",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "core",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["core", "option", "Option"],
                                    kind: erised::types::ItemKind::Enum,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::BorrowedRef {
                                        lifetime: Some("'static"),
                                        mutable: false,
                                        type_: erised::types::Type::Primitive("str"),
                                    },
                                )],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("is_literal"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (196usize, 4usize),
                                end: (196usize, 24usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::Primitive("bool"),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::TypeBinding {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "TypeBinding",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "TypeBinding"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (200usize, 0usize),
                    end: (204usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (201usize, 4usize),
                                end: (201usize, 20usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "String",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "string", "String"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("args"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (202usize, 4usize),
                                end: (202usize, 25usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "GenericArgs",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::GenericArgs as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("binding"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (203usize, 4usize),
                                end: (203usize, 32usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "TypeBindingKind",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::TypeBindingKind as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticTypeBinding {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Struct(erised::types::Struct {
            name: "StaticTypeBinding",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticTypeBinding"],
                    kind: erised::types::ItemKind::Struct,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (199usize, 23usize),
                    end: (199usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            kind: erised::types::StructKind::Plain {
                fields: &[
                    erised::types::StructField {
                        name: Some("name"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (199usize, 23usize),
                                end: (199usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Primitive("str"),
                        },
                    },
                    erised::types::StructField {
                        name: Some("args"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (202usize, 4usize),
                                end: (202usize, 25usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticGenericArgs",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticGenericArgs as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                    erised::types::StructField {
                        name: Some("binding"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (203usize, 4usize),
                                end: (203usize, 32usize),
                            }),
                            visibility: erised::types::Visibility::Public,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticTypeBindingKind",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticTypeBindingKind as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    },
                ],
                fields_stripped: false,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::TypeBindingKind {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "TypeBindingKind",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "TypeBindingKind"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (207usize, 0usize),
                    end: (210usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Equality",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "TypeBindingKind", "Equality"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (208usize, 4usize),
                            end: (208usize, 18usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (208usize, 13usize),
                                end: (208usize, 17usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Term",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::Term as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Constraint",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "TypeBindingKind", "Constraint"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (209usize, 4usize),
                            end: (209usize, 33usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (209usize, 15usize),
                                end: (209usize, 32usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "Vec",
                            prefix: "",
                            target: erised::types::Identifiable::Summary(|| {
                                erised::types::ItemSummary {
                                    krate: || erised::types::ExternalCrate {
                                        name: "alloc",
                                        html_root_url: Some("https://doc.rust-lang.org/nightly/"),
                                    },
                                    path: &["alloc", "vec", "Vec"],
                                    kind: erised::types::ItemKind::Struct,
                                }
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[erised::types::GenericArg::Type(
                                    erised::types::Type::ResolvedPath(erised::types::Path {
                                        name: "GenericBound",
                                        prefix: "",
                                        target: erised::types::Identifiable::Item(|| {
                                            < :: erised :: heap_types :: GenericBound as Reflect > :: TYPE_INFO
                                        }),
                                        args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                            args: &[],
                                            bindings: &[],
                                        }),
                                    }),
                                )],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::StaticTypeBindingKind {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "StaticTypeBindingKind",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "StaticTypeBindingKind"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (206usize, 23usize),
                    end: (206usize, 31usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Equality",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "StaticTypeBindingKind", "Equality"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (206usize, 23usize),
                            end: (206usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (208usize, 13usize),
                                end: (208usize, 17usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::ResolvedPath(erised::types::Path {
                            name: "StaticTerm",
                            prefix: "",
                            target: erised::types::Identifiable::Item(|| {
                                <::erised::heap_types::StaticTerm as Reflect>::TYPE_INFO
                            }),
                            args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                args: &[],
                                bindings: &[],
                            }),
                        }),
                    })]),
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Constraint",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &[
                                "erised",
                                "heap_types",
                                "StaticTypeBindingKind",
                                "Constraint",
                            ],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (206usize, 23usize),
                            end: (206usize, 31usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Tuple(&[Some(erised::types::StructField {
                        name: Some("0"),
                        meta: erised::types::ItemMeta {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            summary: None,
                            span: Some(erised::types::Span {
                                filename: "crates/lib/src/heap_types.rs",
                                begin: (206usize, 23usize),
                                end: (206usize, 31usize),
                            }),
                            visibility: erised::types::Visibility::Default,
                            docs: None,
                            attrs: &[],
                            deprecation: None,
                        },
                        ty: erised::types::Type::BorrowedRef {
                            lifetime: Some("'static"),
                            mutable: false,
                            type_: erised::types::Type::Slice(erised::types::Type::ResolvedPath(
                                erised::types::Path {
                                    name: "StaticGenericBound",
                                    prefix: "",
                                    target: erised::types::Identifiable::Item(|| {
                                        < :: erised :: heap_types :: StaticGenericBound as Reflect > :: TYPE_INFO
                                    }),
                                    args: Some(|| erised::types::GenericArgs::AngleBracketed {
                                        args: &[],
                                        bindings: &[],
                                    }),
                                },
                            )),
                        },
                    })]),
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
    impl Reflect for ::erised::heap_types::ItemKind {
        const TYPE_INFO: erised::types::Item = erised::types::Item::Enum(erised::types::Enum {
            name: "ItemKind",
            meta: erised::types::ItemMeta {
                krate: || erised::types::ExternalCrate {
                    name: "erised",
                    html_root_url: None,
                },
                summary: Some(erised::types::ItemSummary {
                    krate: || erised::types::ExternalCrate {
                        name: "erised",
                        html_root_url: None,
                    },
                    path: &["erised", "heap_types", "ItemKind"],
                    kind: erised::types::ItemKind::Enum,
                }),
                span: Some(erised::types::Span {
                    filename: "crates/lib/src/heap_types.rs",
                    begin: (213usize, 0usize),
                    end: (238usize, 1usize),
                }),
                visibility: erised::types::Visibility::Public,
                docs: None,
                attrs: &[],
                deprecation: None,
            },
            generics: erised::types::Generics {
                params: &[],
                where_predicates: &[],
            },
            variants_stripped: false,
            variants: &[
                erised::types::Variant {
                    name: "Module",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "Module"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (214usize, 4usize),
                            end: (214usize, 10usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "ExternCrate",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "ExternCrate"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (215usize, 4usize),
                            end: (215usize, 15usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Import",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "Import"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (216usize, 4usize),
                            end: (216usize, 10usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Struct",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "Struct"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (217usize, 4usize),
                            end: (217usize, 10usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "StructField",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "StructField"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (218usize, 4usize),
                            end: (218usize, 15usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Union",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "Union"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (219usize, 4usize),
                            end: (219usize, 9usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Enum",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "Enum"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (220usize, 4usize),
                            end: (220usize, 8usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Variant",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "Variant"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (221usize, 4usize),
                            end: (221usize, 11usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Function",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "Function"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (222usize, 4usize),
                            end: (222usize, 12usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Typedef",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "Typedef"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (223usize, 4usize),
                            end: (223usize, 11usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "OpaqueTy",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "OpaqueTy"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (224usize, 4usize),
                            end: (224usize, 12usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Constant",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "Constant"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (225usize, 4usize),
                            end: (225usize, 12usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Trait",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "Trait"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (226usize, 4usize),
                            end: (226usize, 9usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "TraitAlias",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "TraitAlias"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (227usize, 4usize),
                            end: (227usize, 14usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Impl",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "Impl"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (228usize, 4usize),
                            end: (228usize, 8usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Static",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "Static"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (229usize, 4usize),
                            end: (229usize, 10usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "ForeignType",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "ForeignType"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (230usize, 4usize),
                            end: (230usize, 15usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Macro",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "Macro"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (231usize, 4usize),
                            end: (231usize, 9usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "ProcAttribute",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "ProcAttribute"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (232usize, 4usize),
                            end: (232usize, 17usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "ProcDerive",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "ProcDerive"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (233usize, 4usize),
                            end: (233usize, 14usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "AssocConst",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "AssocConst"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (234usize, 4usize),
                            end: (234usize, 14usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "AssocType",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "AssocType"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (235usize, 4usize),
                            end: (235usize, 13usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Primitive",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "Primitive"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (236usize, 4usize),
                            end: (236usize, 13usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
                erised::types::Variant {
                    name: "Keyword",
                    meta: erised::types::ItemMeta {
                        krate: || erised::types::ExternalCrate {
                            name: "erised",
                            html_root_url: None,
                        },
                        summary: Some(erised::types::ItemSummary {
                            krate: || erised::types::ExternalCrate {
                                name: "erised",
                                html_root_url: None,
                            },
                            path: &["erised", "heap_types", "ItemKind", "Keyword"],
                            kind: erised::types::ItemKind::Variant,
                        }),
                        span: Some(erised::types::Span {
                            filename: "crates/lib/src/heap_types.rs",
                            begin: (237usize, 4usize),
                            end: (237usize, 11usize),
                        }),
                        visibility: erised::types::Visibility::Default,
                        docs: None,
                        attrs: &[],
                        deprecation: None,
                    },
                    kind: erised::types::VariantKind::Plain,
                    discriminant: None,
                },
            ],
            impls: &[
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
                erised::types::Identifiable::Item(|| todo!()),
            ],
        });
    }
}

